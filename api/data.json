{
    "project": {
        "name": "Parcela",
        "description": "Parcela Library",
        "version": "0.0.1",
        "url": "https://github.com/Parcela"
    },
    "files": {
        "src/event/event-emitter.js": {
            "name": "src/event/event-emitter.js",
            "modules": {
                "event-emitter": 1
            },
            "classes": {
                "Event.Emitter": 1
            },
            "fors": {
                "Event": 1
            },
            "namespaces": {}
        },
        "src/event/event-listener.js": {
            "name": "src/event/event-listener.js",
            "modules": {
                "event-listener": 1
            },
            "classes": {
                "Event.Listener": 1
            },
            "fors": {
                "Event": 1
            },
            "namespaces": {}
        },
        "src/event/event.js": {
            "name": "src/event/event.js",
            "modules": {
                "event": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/event-dom/event-dom.js": {
            "name": "src/event-dom/event-dom.js",
            "modules": {
                "event-dom": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/event-hammerjs/event-hammer.js": {
            "name": "src/event-hammerjs/event-hammer.js",
            "modules": {
                "event-hammerjs": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-assets.js": {
            "name": "src/io/io-assets.js",
            "modules": {
                "io-assets": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-cors.js": {
            "name": "src/io/io-cors.js",
            "modules": {
                "io-cors": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-jsonp.js": {
            "name": "src/io/io-jsonp.js",
            "modules": {
                "io-jsonp": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-node.js": {
            "name": "src/io/io-node.js",
            "modules": {
                "io-node": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-stream.js": {
            "name": "src/io/io-stream.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-transfer.js": {
            "name": "src/io/io-transfer.js",
            "modules": {
                "io-transfer": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-win.js": {
            "name": "src/io/io-win.js",
            "modules": {
                "io-win": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/io/io-xml.js": {
            "name": "src/io/io-xml.js",
            "modules": {
                "io-xml": 1
            },
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lang-ext/lang-ext.js": {
            "name": "src/lang-ext/lang-ext.js",
            "modules": {
                "Object": 1
            },
            "classes": {
                "Object": 1,
                "Function": 1
            },
            "fors": {
                "Object": 1
            },
            "namespaces": {}
        },
        "src/parcel/events.js": {
            "name": "src/parcel/events.js",
            "modules": {
                "parcel-event-listener": 1
            },
            "classes": {
                "Parcel.Listener": 1,
                "Parcel.EventListener": 1
            },
            "fors": {
                "Parcel": 1
            },
            "namespaces": {}
        },
        "src/parcel/parcel.js": {
            "name": "src/parcel/parcel.js",
            "modules": {
                "parcel": 1
            },
            "classes": {
                "Parcel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/parcela/parcela.js": {
            "name": "src/parcela/parcela.js",
            "modules": {
                "Parcela": 1
            },
            "classes": {
                "Parcela": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/promise-ext/promise-ext.js": {
            "name": "src/promise-ext/promise-ext.js",
            "modules": {
                "promise-ext": 1
            },
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/routing/routing.js": {
            "name": "src/routing/routing.js",
            "modules": {
                "core-routing": 1
            },
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/lib/idgenerator.js": {
            "name": "src/utils/lib/idgenerator.js",
            "modules": {
                "utils": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/lib/timers.js": {
            "name": "src/utils/lib/timers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/lib/typeof.js": {
            "name": "src/utils/lib/typeof.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/virtual-dom/virtual-dom.js": {
            "name": "src/virtual-dom/virtual-dom.js",
            "modules": {
                "virtual-dom": 1
            },
            "classes": {
                "vDOM": 1,
                "vNode": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "event": {
            "name": "event",
            "submodules": {
                "event-emitter": 1,
                "event-listener": 1,
                "event-dom": 1,
                "event-hammerjs": 1
            },
            "classes": {
                "Event.Emitter": 1,
                "Event": 1,
                "Event.Listener": 1
            },
            "fors": {
                "Event": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/event/event-listener.js",
            "line": 54,
            "description": "Defines the Event-Class, which should be instantiated to get its functionality\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE",
            "is_constructor": 1,
            "since": "0.0.1"
        },
        "event-emitter": {
            "name": "event-emitter",
            "submodules": {},
            "classes": {
                "Event.Emitter": 1
            },
            "fors": {
                "Event": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "src/event/event-emitter.js",
            "line": 53,
            "description": "Extends the Event-instance by adding the method `Emitter` to it.\nThe `Emitter-method` returns an object that should be merged into any Class-instance or object you\nwant to extend with the emit-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventEmitter = require('event-emitter');<br>\n    EventEmitter.mergeInto(Event);"
            ],
            "since": "0.0.1"
        },
        "event-listener": {
            "name": "event-listener",
            "submodules": {},
            "classes": {
                "Event.Listener": 1
            },
            "fors": {
                "Event": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "src/event/event-listener.js",
            "line": 54,
            "description": "Extends the Event-instance by adding the object `Listener` to it.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventListener = require('event-listener');<br>\n    EventListener.mergeInto(Event);"
            ],
            "since": "0.0.1"
        },
        "event-dom": {
            "name": "event-dom",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "src/event-dom/event-dom.js",
            "line": 5,
            "description": "Integrates DOM-events to core-event-base. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "event-hammerjs": {
            "name": "event-hammerjs",
            "submodules": {},
            "classes": {
                "Event": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "event",
            "namespace": "",
            "file": "src/event-hammerjs/event-hammer.js",
            "line": 5,
            "description": "Integrates DOM-events to core-event-base. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\nShould be called using  the provided `init`-method like this:",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "io": {
            "name": "io",
            "submodules": {
                "io-assets": 1,
                "io-cors": 1,
                "io-jsonp": 1,
                "io-node": 1,
                "io-transfer": 1,
                "io-win": 1,
                "io-xml": 1
            },
            "classes": {
                "IO": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/io/io-xml.js",
            "line": 4
        },
        "io-assets": {
            "name": "io-assets",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-assets.js",
            "line": 3,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOassets = require(\"io-assets\");\nIOassets.mergeInto(IO);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "io-cors": {
            "name": "io-cors",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-cors.js",
            "line": 4,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOcors = require(\"io-cors\");\nIOcors.mergeInto(IO);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "io-jsonp": {
            "name": "io-jsonp",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-jsonp.js",
            "line": 3,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOjsonp = require(\"io-jsonp\");\nIOjsonp.mergeInto(IO);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "io-node": {
            "name": "io-node",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-node.js",
            "line": 1,
            "description": "Provides core IO-functionality for NodeJS in the same way as 'io-win.js' does on the browser.\n This way, all IO-methods can be used inside nodejs as well."
        },
        "io-transfer": {
            "name": "io-transfer",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-transfer.js",
            "line": 3,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOtransfer = require(\"io-transfer\");\nIOtransfer.mergeInto(IO);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "io-win": {
            "name": "io-win",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-win.js",
            "line": 3,
            "description": "Provides core IO-functionality.\n\nThe returned xhr DOES support CORS for all modern browsers.\nTo use CORS, you need to setup the responseserver right\nMore info about CORS: http://remysharp.com/2011/04/21/getting-cors-working/\n\n\n\n\nTODO: make STREAMING with IE9-browsers work: the XDomainRequest() seems not to fire the onprogress-event...\n      (and XMLHttpRequest1 doesn't have this event at all)\nTODO: make CORS with IE9-browsers work: the XDomainRequest() fails currently on cors..\n\n\n\n\nUsing CORS with IE9-browsers need special consideration, for it uses the XDomainRequest():\n1. Only GET and POST methods are supported. Other methods will be reset into one of these,\n   so make sure the cross-domain-server handles all requests as being send with the GET or POST method.\n2. Only text/plain is supported for the request's Content-Type header. This will lead into troubles when handling\n   POST-requests: the cross-domain-server needs to extract the parameters itself. For nodejs, there is a nice npm module:\n   `express-ie-cors` https://github.com/advanced/express-ie-cors/blob/master/lib/express-ie-cors.js\n3. No custom headers can be added to the request.\n4. No authentication or cookies will be sent with the request.\nmore info: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx"
        },
        "io-xml": {
            "name": "io-xml",
            "submodules": {},
            "classes": {
                "IO": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "io",
            "namespace": "",
            "file": "src/io/io-xml.js",
            "line": 4,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOxml = require(\"io-xml\");\nIOxml.mergeInto(IO);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "Object": {
            "name": "Object",
            "submodules": {},
            "classes": {
                "Object": 1,
                "Function": 1
            },
            "fors": {
                "Object": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/lang-ext/lang-ext.js",
            "line": 252,
            "description": "Pollyfils for often used functionality for objects and Functions"
        },
        "parcel": {
            "name": "parcel",
            "submodules": {
                "parcel-event-listener": 1
            },
            "classes": {
                "Parcel.Listener": 1,
                "Parcel": 1,
                "Parcel.EventListener": 1
            },
            "fors": {
                "Parcel": 1
            },
            "namespaces": {},
            "module": "core",
            "file": "src/parcel/events.js",
            "line": 61,
            "description": "All Parcela apps should inherit from this class.\n\nThe constructor ensures the `config` argument exists and is an object.\nIt merges the values from the [`defaultConfig`](#property_defaultConfig) property into it and\nsets the properties of the instance to the resulting values.\nIt then calls the `init` method with all its arguments.\nThe [`init`](#method_init) might be considered the true constructor of the parcel."
        },
        "parcel-event-listener": {
            "name": "parcel-event-listener",
            "submodules": {},
            "classes": {
                "Parcel.Listener": 1,
                "Parcel.EventListener": 1
            },
            "fors": {
                "Parcel": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "parcel",
            "namespace": "",
            "file": "src/parcel/events.js",
            "line": 61,
            "description": "Extends the Event-instance by adding the object `listener` to it.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var coreEventListener = require('core-event-listener');<br>\n    coreEventListener.extend(ITSA.event);"
            ],
            "since": "0.0.1\n\n<i>Copyright (c) 2014 Parcela - https://github.com/Parcela</i>\nNew BSD License - https://github.com/ItsAsbreuk/itsa-library/blob/master/LICENSE"
        },
        "core": {
            "name": "core",
            "submodules": {
                "core-routing": 1
            },
            "classes": {
                "Parcel": 1,
                "Router": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/routing/routing.js",
            "line": 25
        },
        "Parcela": {
            "name": "Parcela",
            "submodules": {},
            "classes": {
                "Parcela": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/parcela/parcela.js",
            "line": 13,
            "description": "The Parcela module is an aggregator for all the individual modules that the library uses.\nThe developer is free to use it as it is or tailor it to contain whatever modules\nhe/she might need in the global namespace.  \n\nThe modules themselves work quite well independent of this module and can be used\nseparately without the need of them being integrated under one globa namespace."
        },
        "Promise": {
            "name": "Promise",
            "submodules": {
                "promise-ext": 1
            },
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/promise-ext/promise-ext.js",
            "line": 3
        },
        "promise-ext": {
            "name": "promise-ext",
            "submodules": {},
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Promise",
            "namespace": "",
            "file": "src/promise-ext/promise-ext.js",
            "line": 3,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable."
        },
        "core-routing": {
            "name": "core-routing",
            "submodules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "core",
            "namespace": "",
            "file": "src/routing/routing.js",
            "line": 25,
            "description": "Provides routing services.\n\nThe module exports a single function which should be called to \nfetch the [Router](../classes/Router.html) class.\n\nThe function must be passed a reference to the DOM `window` object\nor a reasonable substitute.\nFor modules to be loaded through Browserify, \nthis is usually `global.window`.  For modules loaded both through\nBrowserify or node, assuming a suitable emulator, it can be\ndone like this:\n \n```   \nvar vDOM = require('virtual-dom')(global.window || require('dom-window-emulator'));\n```"
        },
        "utils": {
            "name": "utils",
            "submodules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/utils/lib/typeof.js",
            "line": 14,
            "description": "Collection of various utility functions.",
            "static": 1
        },
        "virtual-dom": {
            "name": "virtual-dom",
            "submodules": {},
            "classes": {
                "vDOM": 1,
                "vNode": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 718,
            "description": "Provides virtual dom functionality for other modules.\n\nThe module exports a single function which should be called to\nfetch the [vDOM](../classes/vDOM.html) class.\n\nThe function must be passed a reference to the DOM `window` object\nor a reasonable substitute.\nFor modules to be loaded through Browserify,\nthis is usually `global.window`.  For modules loaded both through\nBrowserify or node, assuming a suitable emulator, it can be\ndone like this:\n\n```\n   var vDOM = require('virtual-dom')(global.window || require('dom-window-emulator'));\n```"
        }
    },
    "classes": {
        "Event.Emitter": {
            "name": "Event.Emitter",
            "shortname": "Event.Emitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "submodule": "event-emitter",
            "namespace": "",
            "file": "src/event/event-emitter.js",
            "line": 53,
            "description": "This object should be merged into any Class-instance or object that you want to provide\nevent-emitter methods. This way, the appropriate methods can be invoked on the instance.\ninstead of using the static Event-methods.\n\nWhen merging, you need to merge a method with the `emitterName` as its only argument. f.e:\nEvent.Emitter('PersonalProfile')\n\nIt is highly recommendable to merge on the prototype instead of the instance. See the docs.",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventEmitter = require('event-emitter');<br>\n    EventEmitter.mergeInto(Event);"
            ]
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "submodule": "event-hammerjs",
            "namespace": "",
            "file": "src/event-hammerjs/event-hammer.js",
            "line": 5,
            "description": "Integrates DOM-events to core-event-base. more about DOM-events:\nhttp://www.smashingmagazine.com/2013/11/12/an-introduction-to-dom-events/\n\nShould be called using  the provided `init`-method like this:",
            "example": [
                "\nEvent = require('event');\nDOMEvent = require('event-dom');\nDOMEvent.mergeInto(Event);"
            ]
        },
        "Event.Listener": {
            "name": "Event.Listener",
            "shortname": "Event.Listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event",
            "submodule": "event-listener",
            "namespace": "",
            "file": "src/event/event-listener.js",
            "line": 54,
            "description": "This object should be merged into any Class-instance or object that you want to provide\nevent-listener methods. This way, the appropriate methods can be invoked on the instance.\ninstead of using the static Event-methods.\n\nIt is highly recommendable to merge on the prototype instead of the instance. See the docs.",
            "example": [
                "\n    var Event = require('event');<br>\n    var EventListener = require('event-listener');<br>\n    EventListener.mergeInto(Event);"
            ]
        },
        "IO": {
            "name": "IO",
            "shortname": "IO",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "io",
            "submodule": "io-xml",
            "namespace": "",
            "file": "src/io/io-xml.js",
            "line": 4,
            "description": "Extends io by adding the method `readXML` to it.\nShould be called using  the provided `mergeInto`-method like this:",
            "example": [
                "\nvar IO = require(\"io\");\nvar IOxml = require(\"io-xml\");\nIOxml.mergeInto(IO);"
            ]
        },
        "Object": {
            "name": "Object",
            "shortname": "Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Object",
            "namespace": "",
            "file": "src/lang-ext/lang-ext.js",
            "line": 48,
            "description": "Pollyfils for often used functionality for objects"
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Object",
            "namespace": "",
            "file": "src/lang-ext/lang-ext.js",
            "line": 252,
            "description": "Pollyfils for often used functionality for Function"
        },
        "Parcel.Listener": {
            "name": "Parcel.Listener",
            "shortname": "Parcel.Listener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parcel",
            "submodule": "parcel-event-listener",
            "namespace": "",
            "file": "src/parcel/events.js",
            "line": 5,
            "description": "Extends the Event-instance by adding the object `listener` to it.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\nShould be called using  the provided `extend`-method like this:",
            "example": [
                "\n    var coreEventListener = require('core-event-listener');<br>\n    coreEventListener.extend(ITSA.event);"
            ]
        },
        "Parcel": {
            "name": "Parcel",
            "shortname": "Parcel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "submodule": "parcel",
            "namespace": "",
            "file": "src/parcel/parcel.js",
            "line": 7,
            "description": "All Parcela apps should inherit from this class.\n\nThe constructor ensures the `config` argument exists and is an object.\nIt merges the values from the [`defaultConfig`](#property_defaultConfig) property into it and\nsets the properties of the instance to the resulting values.\nIt then calls the `init` method with all its arguments.\nThe [`init`](#method_init) might be considered the true constructor of the parcel.",
            "is_constructor": 1
        },
        "Parcel.EventListener": {
            "name": "Parcel.EventListener",
            "shortname": "Parcel.EventListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "parcel",
            "submodule": "parcel-event-listener",
            "namespace": "",
            "file": "src/parcel/events.js",
            "line": 61,
            "description": "This object should be merged into any Class-instance or object that you want to provide\nevent-listener methods. This way, the appropriate methods can be invoked on the instance.\ninstead of using the static Event-methods.\n\nIt is highly recommendable to merge on the prototype instead of the instance. See the docs."
        },
        "Parcela": {
            "name": "Parcela",
            "shortname": "Parcela",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Parcela",
            "namespace": "",
            "file": "src/parcela/parcela.js",
            "line": 13,
            "description": "The Parcela class provides the core functionality for the Parcela library\nand is the root namespace for all the additional modules.\n\nThe Parcela class cannot be instantiated.\nInstead, the Parcela function takes a configuration object to allow for tailoring of the library.\nThe Parcela function returns itself to allow for further chaining.\n\nCalling the Parcela function is optional. If the default configuration is acceptable,\nthe Parcela class can be used directly.\n\nThe Parcela name is usually used only once in an application, when configuring it\nand when calling the [`ready`](#method_ready) or [`require`](#method_require) methods.\nThe callback to these two methods provide a reference to Parcela itself as their argument.\nThese methods allow the developer to rename Parcela to a shorter name, usually `P`,\nfor use within the local scope.\n\n Parcela( config )\n     .require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of Parcela\n     });\n\n // If the default configuration is acceptable, you can simply do:\n Parcela.require('dialog', 'event', ...)\n     .then(function (P) {\n         // P is an alias of Parcela\n     });\n\n // If extra modules are to be loaded later, you can simply do:\n Parcela( config ).ready\n     .then(function (P) {\n         // P is an alias of Parcela\n     });\n\n // And if no configuration is needed:\n Parcela.ready\n     .then(function (P) {\n         // P is an alias of Parcela\n     });",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "Configuration options for the Parcela Library",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            }
        },
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Promise",
            "submodule": "promise-ext",
            "namespace": "",
            "file": "src/promise-ext/promise-ext.js",
            "line": 3,
            "description": "Provides additional Promise-methods. These are extra methods which are not part of the PromiseA+ specification,\nBut are all Promise/A+ compatable."
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "core",
            "submodule": "core-routing",
            "namespace": "",
            "file": "src/routing/routing.js",
            "line": 25,
            "description": "Provides routing services to Parcela",
            "static": 1
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils",
            "namespace": "",
            "file": "src/utils/lib/typeof.js",
            "line": 14,
            "description": "Collection of various utility functions."
        },
        "vDOM": {
            "name": "vDOM",
            "shortname": "vDOM",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-dom",
            "namespace": "",
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 22,
            "description": "Contains the virtual DOM handling methods and properties"
        },
        "vNode": {
            "name": "vNode",
            "shortname": "vNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "virtual-dom",
            "namespace": "",
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 718,
            "description": "Internal, virtual representation of an actual DOM node.\nThere are two sub-versions of it.\n\n* For text nodes, the vNode will be an instance of String\n  with an extra `node` property.\n* For nodes corresponding to Parcel containers, the node\n  will have the extra `parcel` and `stamp` properties.\n\nThe virtual DOM version differs from that produced by the\n[Parcel.view](Parcel.html#method_view) method in that it has the `node`\nproperty set.\n\nThis entry is just for documentation purposes.\nThere is no actual code for this class.  It is created as an object literal.",
            "access": "protected",
            "tagname": "",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/event/event-emitter.js",
            "line": 28,
            "description": "Creates an object which holds all event-emission methods.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the emit-methods, so the appropriate methods can be invoked on the instance.\n\nSee [Event.Emitter](Event.Emitter.html) for all properties that can be merged.",
            "example": [
                "\n    var greenObject = {};\n    greenObject.merge(Event.Emitter('green'));\n    greenObject.emit('save'); // --> emits the customEvent `green:save`",
                "\n    Profile.mergePrototypes(Event.Emitter('PersonalProfile'));\n    var myProfile = new Profile({name: Marco});\n    myProfile.emit('save'); // --> emits the customEvent `PersonalProfile:save`"
            ],
            "itemtype": "method",
            "name": "Emitter",
            "params": [
                {
                    "name": "emitterName",
                    "description": "the Event-instance that is responsible for the event-system.\n       Should be an instance created by the class provided by `core-custom-event`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with the methods which should be merged inside an instance.",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "src/event/event-emitter.js",
            "line": 76,
            "description": "Defines a CustomEvent. If the eventtype already exists, it will not be overridden,\nunless you force to assign with `.forceAssign()`\n\nThe returned object comes with 4 methods which can be invoked chainable:\n\n<ul>\n    <li>defaultFn() --> the default-function of the event</li>\n    <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n    <li>forceAssign() --> overrides any previous definition</li>\n    <li>unHaltable() --> makes the customEvent cannot be halted</li>\n    <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n    <li>unSilencable() --> makes that emitters cannot make this event to perform silently (using e.silent)</li>\n    <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n    <li>noRender() --> prevents this customEvent from render the dom. Overrules unRenderPreventable()</li>\n</ul>",
            "itemtype": "method",
            "name": "defineEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the customEvent, without `emitterName`.\n       The final event that will be created has the syntax: `emitterName:eventName`,\n       where `emitterName:` is automaticly prepended.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with extra methods that can be chained:\n<ul>\n     <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n     <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n     <li>forceAssign() --> overrides any previous definition</li>\n     <li>defaultFn() --> the default-function of the event</li>\n     <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "src/event/event-emitter.js",
            "line": 111,
            "description": "Emits the event `eventName` on behalf of the instance holding this method.",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be sent (available as e.type)\n       you could pass a customEvent here 'emitterName:eventName', which would\n       overrule the `instance-emitterName`",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "extra payload to be added to the event-object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "<ul>\n    <li>on success: returnValue {Any} of the defaultFn</li>\n    <li>on error: reason {Any} Either: description 'event was halted', 'event was defaultPrevented' or the returnvalue of the preventedFn</li>\n</ul>",
                "type": "Promise"
            },
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "src/event/event-emitter.js",
            "line": 130,
            "description": "Removes all event-definitions of the instance holding this method.",
            "itemtype": "method",
            "name": "undefAllEvents",
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "src/event/event-emitter.js",
            "line": 140,
            "description": "Removes the event-definition of the specified customEvent.",
            "itemtype": "method",
            "name": "undefEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the customEvent, without `emitterName`.\n       The calculated customEvent which will be undefined, will have the syntax: `emitterName:eventName`.\n       where `emitterName:` is automaticly prepended.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event.Emitter",
            "module": "event",
            "submodule": "event-emitter"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 27,
            "description": "Holds all event-listener methods.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\nSee [Event.Listener](Event.Listener.html) for all properties that can be merged.",
            "example": [
                "\n    var blueObject = {};\n    blueObject.merge(Event.Listener);\n    blueObject.after('*:save', function(e) {\n        ...\n    });",
                "\n    Members.mergePrototypes(Event.Listener);\n    var myMembers = new Members();\n    myMembers.after('PersonalProfile:save', function(e) {\n        ...\n    });"
            ],
            "itemtype": "property",
            "name": "Listener",
            "type": "Object",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 65,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 88,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 111,
            "description": "Detaches (unsubscribes) the listener from the specified customEvent,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 124,
            "description": "Detaches (unsubscribes) the listener from all customevents,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detachAll",
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 135,
            "description": "Alias for `after`.\n\nSubscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 160,
            "description": "Alias for `onceAfter`.\n\nSubscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 187,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event-listener.js",
            "line": 212,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceBefore",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event.Listener",
            "module": "event",
            "submodule": "event-listener"
        },
        {
            "file": "src/event/event.js",
            "line": 57,
            "description": "Subscribes to a customEvent. The callback will be executed `after` the defaultFn.",
            "static": 1,
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.after() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 94,
            "description": "Subscribes to a customEvent. The callback will be executed `before` the defaultFn.",
            "static": 1,
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.before() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 131,
            "description": "Defines an emitterName into the instance (emitter).\nThis will add a protected property `_emitterName` to the instance.",
            "static": 1,
            "itemtype": "method",
            "name": "defineEmitter",
            "params": [
                {
                    "name": "emitter",
                    "description": "instance that should hold the emitterName",
                    "type": "Object"
                },
                {
                    "name": "emitterName",
                    "description": "identifier that will be added when events are sent (`emitterName:eventName`)",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 152,
            "description": "Defines a CustomEvent. If the eventtype already exists, it will not be overridden,\nunless you force to assign with `.forceAssign()`\n\nThe returned object comes with 4 methods which can be invoked chainable:\n\n<ul>\n    <li>defaultFn() --> the default-function of the event</li>\n    <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n    <li>forceAssign() --> overrides any previous definition</li>\n    <li>unHaltable() --> makes the customEvent cannot be halted</li>\n    <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n    <li>unSilencable() --> makes that emitters cannot make this event to perform silently (using e.silent)</li>\n    <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n    <li>noRender() --> prevents this customEvent from render the dom. Overrules unRenderPreventable()</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "defineEvent",
            "params": [
                {
                    "name": "customEvent",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "with extra methods that can be chained:\n<ul>\n     <li>unPreventable() --> makes the customEvent's defaultFn cannot be prevented</li>\n     <li>unRenderPreventable() --> makes that the customEvent's render cannot be prevented</li>\n     <li>forceAssign() --> overrides any previous definition</li>\n     <li>defaultFn() --> the default-function of the event</li>\n     <li>preventedFn() --> the function that should be invoked when the event is defaultPrevented</li>\n</ul>",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 246,
            "description": "Detaches (unsubscribes) the listener from the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "listener",
                    "description": "The instance that is going to detach the customEvent.\n       When not passed through (or undefined), all customevents of all instances are detached",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.\n       Can be set as the only argument.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 264,
            "description": "Detaches (unsubscribes) the listener from all customevents.",
            "static": 1,
            "itemtype": "method",
            "name": "detachAll",
            "params": [
                {
                    "name": "listener",
                    "description": "The instance that is going to detach the customEvent",
                    "type": "Object"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 288,
            "description": "Emits the event `eventName` on behalf of `emitter`, which becomes e.target in the eventobject.\nDuring this process, all subscribers and the defaultFn/preventedFn get an eventobject passed through.\nThe eventobject is created with at least these properties:\n\n<ul>\n    <li>e.target --> source that triggered the event (instance or DOM-node), specified by `emitter`</li>\n    <li>e.type --> eventName</li>\n    <li>e.emitter --> emitterName</li>\n    <li>e.status --> status-information:\n         <ul>\n              <li>e.status.ok --> `true|false` whether the event got executed (not halted or defaultPrevented)</li>\n              <li>e.status.defaultFn (optional) --> `true` if any defaultFn got invoked</li>\n              <li>e.status.preventedFn (optional) --> `true` if any preventedFn got invoked</li>\n              <li>e.status.rendered (optional) --> `true` the vDOM rendered the dom</li>\n              <li>e.status.halted (optional) --> `reason|true` if the event got halted and optional the why</li>\n              <li>e.status.defaultPrevented (optional) -->  `reason|true` if the event got defaultPrevented and optional the why</li>\n              <li>e.status.renderPrevented (optional) -->  `reason|true` if the event got renderPrevented and optional the why</li>\n         </ul>\n    </li>\n</ul>\n\nThe optional `payload` is merged into the eventobject and could be used by the subscribers and the defaultFn/preventedFn.\nIf payload.silent is set true, the subscribers are not getting invoked: only the defaultFn.\n\nThe eventobject also has these methods:\n\n<ul>\n    <li>e.halt() --> stops immediate all actions: no mer subscribers are invoked, no defaultFn/preventedFn</li>\n    <li>e.preventDefault() --> instead of invoking defaultFn, preventedFn will be invoked. No aftersubscribers</li>\n    <li>e.preventRender() --> by default, any event will trigger the vDOM (if exists) to re-render, this can be prevented by calling e.preventRender()</li>\n</ul>\n\n<ul>\n    <li>First, before-subscribers are invoked: this is the place where you might call `e.halt()`, `a.preventDefault()` or `e.preventRender()`</li>\n    <li>Next, defaultFn or preventedFn gets invoked, depending on whether e.halt() or a.preventDefault() has been called</li>\n    <li>Next, after-subscribers get invoked (unless e.halt() or a.preventDefault() has been called)</li>\n    <li>Finally, the finalization takes place: any subscribers are invoked, unless e.halt() or a.preventDefault() has been called</li>\n<ul>",
            "static": 1,
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "emitter",
                    "description": "instance that emits the events",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customEvent",
                    "description": "Full customEvent conform syntax `emitterName:eventName`.\n       `emitterName` is available as **e.emitter**, `eventName` as **e.type**.",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "extra payload to be added to the event-object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "eventobject or undefined when the event was halted or preventDefaulted.",
                "type": "Object|undefined"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 464,
            "description": "Adds a subscriber to the finalization-cycle, which happens after the after-subscribers.\nOnly get invoked when the cycle was not preventDefaulted or halted.",
            "itemtype": "method",
            "name": "finalize",
            "params": [
                {
                    "name": "finallySubscriber",
                    "description": "callback to be invoked\n       Function recieves the eventobject as its only argument",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 487,
            "description": "Creates a notifier for the customEvent.\nYou can use this to create delayed `defineEvents`. When the customEvent is called, the callback gets invoked\n(even before the subsrcibers). Use this callback for delayed customEvent-definitions.\n\nUse **no** wildcards for the emitterName. You might use wildcards for the eventName. Without wildcards, the\nnotification will be unNotified (callback automaticly detached) on the first time the event occurs.\n\nYou **must** specify the full `emitterName:eventName` syntax.\nThe module `core-event-dom` uses `notify` to auto-define DOM-events (UI:*).",
            "static": 1,
            "itemtype": "method",
            "name": "notify",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used only  for`eventName`.\n       If `emitterName` should be defined.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber: will be invoked when the customEvent is called (before any subscribers.\n                Recieves 2 arguments: `Event` and `customEvent`.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "context of the callback",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 518,
            "description": "Alias for `after`.\n\nSubscribes to a customEvent. The callback will be executed `after` the defaultFn.",
            "static": 1,
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.on() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 546,
            "description": "Alias for `onceAfter`.\n\nSubscribes to a customEvent. The callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "static": 1,
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.onceAfter() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 576,
            "description": "Subscribes to a customEvent. The callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "static": 1,
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.onceAfter() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 630,
            "description": "Subscribes to a customEvent. The callback will be executed `before` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "static": 1,
            "itemtype": "method",
            "name": "onceBefore",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "the instance that subscribes to the event.\n       any object can passed through, even those are not extended with event-listener methods.\n       Note: Objects who are extended with listener-methods should use instance.onceBefore() instead.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 684,
            "description": "Removes all event-definitions of an emitter, specified by its `emitterName`.\nWhen `emitterName` is not set, ALL event-definitions will be removed, except for the DOM's `UI`-events.",
            "static": 1,
            "itemtype": "method",
            "name": "undefAllEvents",
            "params": [
                {
                    "name": "emitterName",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String",
                    "optional": true
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 704,
            "description": "Removes the event-definition of the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "undefEvent",
            "params": [
                {
                    "name": "customEvent",
                    "description": "name of the customEvent conform the syntax: `emitterName:eventName`",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 717,
            "description": "unNotifies (unsubscribes) the notifier of the specified customEvent.",
            "static": 1,
            "itemtype": "method",
            "name": "unNotify",
            "params": [
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 730,
            "description": "unNotifies (unsubscribes) the notifiers of all defined customevent-notifications.",
            "static": 1,
            "itemtype": "method",
            "name": "unNotifyAll",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 752,
            "description": "Creates a subscriber to the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_addMultiSubs",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "Array of Strings. customEvent should conform the syntax: `emitterName:eventName`, wildcard `*`\n        may be used for both `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether to make the subscriber the first in the list. By default it will pe appended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 807,
            "description": "Creates a subscriber to the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_addSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether to make the subscriber the first in the list. By default it will pe appended.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 891,
            "description": "Creates the filter-function on the subscriber.\nInside core-event-base this means: just set the filter, but core-event-dom overrides this method\n(because dom-filters could be css-selectors)",
            "itemtype": "method",
            "name": "_createFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function|String"
                },
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whetrer it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 908,
            "description": "Does the actual invocation of a subscriber.",
            "itemtype": "method",
            "name": "_invokeSubs",
            "params": [
                {
                    "name": "e",
                    "description": "event-object",
                    "type": "Object"
                },
                {
                    "name": "subscribers",
                    "description": "contains subscribers (objects) with these members:\n<ul>\n    <li>subscriber.o {Object} context of the callback</li>\n    <li>subscriber.cb {Function} callback to be invoked</li>\n    <li>subscriber.f {Function} filter to be applied</li>\n    <li>subscriber.t {DOM-node} target for the specific selector, which will be set as e.target\n        only when event-dom is active and there are filter-selectors</li>\n    <li>subscriber.n {DOM-node} highest dom-node that acts as the container for delegation.\n        only when event-dom is active and there are filter-selectors</li>\n</ul>",
                    "type": "Array"
                },
                {
                    "name": "before",
                    "description": "whether it concerns before subscribers",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "a sort function to controll the order of execution.\n            Only applyable when working with DOM-events (bubble-order), provided by `core-event-dom`",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 947,
            "description": "Removes a subscriber from the specified customEvent. The customEvent must conform the syntax:\n`emitterName:eventName`.",
            "static": 1,
            "itemtype": "method",
            "name": "_removeSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "before",
                    "description": "whether the subscriber is a `before` subscriber. On falsy, an `after`-subscriber is assumed.",
                    "type": "Boolean"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emmiterName.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "subscriber to the event, when not set, all subscribers of the listener to this customEvent\n                  will be removed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 986,
            "description": "Removes subscribers from the multiple customevents. The customEvent must conform the syntax:\n`emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`\nIf `emitterName` is not defined, `UI` is assumed.\n\nExamples of valid customevents:\n\n<ul>\n    <li>'redmodel:save'</li>\n    <li>'UI:click'</li>\n    <li>'click' --> alias for 'UI:click'</li>\n    <li>'`*`:click' --> careful: will listen to both UIs and non-UI- click-events</li>\n    <li>'redmodel:`*`'</li>\n    <li>'`*`:`*`'</li>\n</ul>",
            "static": 1,
            "itemtype": "method",
            "name": "_removeSubscriber",
            "params": [
                {
                    "name": "listener",
                    "description": "Object that creates the subscriber (and will be listening by `listener.after(...)`)",
                    "type": "Object"
                },
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emmiterName.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1041,
            "description": "Adds a property to the default eventobject's prototype which passes through all eventcycles.\nGoes through Object.defineProperty with configurable, enumerable and writable\nall set to false.",
            "itemtype": "method",
            "name": "_setEventObjProperty",
            "params": [
                {
                    "name": "property",
                    "description": "event-object",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1059,
            "description": "Generates a sort-function. By default NOOP, however core-event-dom will return\na valid function when it needs to sort nodes conform the dom-tree",
            "itemtype": "method",
            "name": "_sortSubs",
            "params": [
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "sortable function",
                "type": "Function|undefined"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1076,
            "description": "Objecthash containing all defined custom-events\nwhich has a structure like this:\n\n_ce = {\n    'UI:click': {\n        preventable: true,\n        defaultFn: function(){...},\n        preventedFn: function(){...},\n        renderPreventable: true\n    },\n    'redmodel:save': {\n        preventable: true,\n        defaultFn: function(){...},\n        preventedFn: function(){...},\n        renderPreventable: true\n    }\n}",
            "itemtype": "property",
            "name": "_ce",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1108,
            "description": "Objecthash containing all defined before and after subscribers\nwhich has a structure like this (`b` represents `before` and `a` represents `after`)\nEvery item that gets in the array consist by itself of 3 properties:\n                                                         subscriberitem = {\n                                                             o: listener,\n                                                             cb: callback,\n                                                             f: filter\n                                                         };\n\n_subs = {\n    'UI:click': {\n        b: [\n            function() {},\n            function() {}\n        ],\n        a: [\n            function() {},\n            function() {}\n        ]\n    },\n    '*:click': {\n        b: [\n            function() {},\n            function() {}\n        ],\n        a: [\n            function() {},\n            function() {}\n        ]\n    },\n    'redmodel:save': {\n        b: [\n            function() {},\n            function() {}\n        ],\n        a: [\n            function() {},\n            function() {}\n        ]\n    }\n}",
            "itemtype": "property",
            "name": "_ce",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1159,
            "description": "Internal list of finalize-subscribers which are invoked at the finalization-cycle, which happens after the after-subscribers.\nIs an array of function-references.",
            "itemtype": "property",
            "name": "_final",
            "default": "[]",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1171,
            "description": "Object that acts as the prototype of the eventobject.\nTo add more methods, you can use `_setEventObjProperty`",
            "itemtype": "property",
            "name": "_defaultEventObj",
            "default": "{\n   halt: function()\n   preventDefault: function()\n   preventRender: function()\n}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event/event.js",
            "line": 1187,
            "description": "Objecthash containing all notifiers, keyed by customEvent name.\nThis list is maintained by `notify`, `unNotify` and `unNotifyAll`\n\n_notifiers = {\n    'UI:click': {\n        cb:function() {}\n        o: {} // context\n    },\n    'redmodel:*': {\n        cb:function() {}\n        o: {} // context\n    },\n    'bluemodel:save': {\n        cb:function() {}\n        o: {} // context\n    }\n}",
            "itemtype": "property",
            "name": "_notifiers",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 70,
            "description": "Internal hash containing all DOM-events that are listened for (at `document`).\n\n_DOMev = {\n    'click': callbackFn,\n    'mousemove': callbackFn,\n    'keypress': callbackFn\n}",
            "itemtype": "property",
            "name": "_DOMev",
            "default": "{}",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 94,
            "description": "Polyfill for bubbling the `focus` and `blur` events in IE8.\n\nIE>8 we can use delegating on ALL events, because we use the capture-phase.\nUnfortunatly this cannot be done with IE<9. But we can simulate focus and blur\ndelegation bu monitoring the focussed node.\n\nThis means the IE<9 will miss the events: 'error', 'load', 'resize' and 'scroll'\nHowever, if you need one of these to work in IE8, then you can `activate` this event on the\nsingle node that you want to minotor. You activate it and then you use the eventsystem\nlike like you are used to. (delegated). Only activated nodes will bubble their non-bubbling events up\nActivation is not done manually, but automaticly: whenever there is a subscriber on a node (or an id-selector)\nand IE<9 is the environment, then a listener for that node is set up.\nSide-effect is that we cannot controll when the listener isn't needed anymore. This might lead to memory-leak - but its IE<9...",
            "itemtype": "method",
            "name": "_bubbleIE8",
            "params": [
                {
                    "name": "instanceEvent",
                    "description": "The Event-system",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 130,
            "description": "Creates a filterfunction out of a css-selector. To be used for catching any dom-element, without restrictions\nof any context (like Parcels can --> Parcel.Event uses _parcelSelToDom instead)\nOn \"non-outside\" events, subscriber.t is set to the node that first matches the selector\nso it can be used to set as e.target in the final subscriber",
            "itemtype": "method",
            "name": "_domSelToFunc",
            "params": [
                {
                    "name": "subscriber",
                    "description": "Subscriber-object",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "css-selector",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whetrer it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 173,
            "description": "Creates the filter-function on the subscriber. Overrides _createFilter from `event-base`.\nInside core-event-base this means: just set the filter, but core-event-dom overrides this method\n(because dom-filters could be css-selectors)",
            "itemtype": "method",
            "name": "_createFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function|String"
                },
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whether it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 205,
            "description": "Generates an event through our Event-system. Does the actual transportation from DOM-events\ninto our Eventsystem. It also looks at the response of our Eventsystem: if our system\nhalts or preventDefaults the customEvent, then the original DOM-event will be preventDefaulted.",
            "itemtype": "method",
            "name": "_evCallback",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the customEvent that is transported to the eventsystem",
                    "type": "String"
                },
                {
                    "name": "e",
                    "description": "eventobject",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 237,
            "description": "Does the actual invocation of a subscriber. Overrides _invokesSubs from `event-base`.",
            "itemtype": "method",
            "name": "_invokeSubs",
            "params": [
                {
                    "name": "e",
                    "description": "event-object",
                    "type": "Object"
                },
                {
                    "name": "subscribers",
                    "description": "contains subscribers (objects) with these members:\n<ul>\n    <li>subscriber.o {Object} context of the callback</li>\n    <li>subscriber.cb {Function} callback to be invoked</li>\n    <li>subscriber.f {Function} filter to be applied</li>\n    <li>subscriber.t {DOM-node} target for the specific selector, which will be set as e.target\n        only when event-dom is active and there are filter-selectors</li>\n    <li>subscriber.n {DOM-node} highest dom-node that acts as the container for delegation.\n        only when core-event-dom is active and there are filter-selectors</li>\n</ul>",
                    "type": "Array"
                },
                {
                    "name": "before",
                    "description": "whether it concerns before subscribers",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "a sort function to controll the order of execution.\n            Only applyable when working with DOM-events (bubble-order), provided by `core-event-dom`",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 345,
            "description": "Creates a filterfunction out of a css-selector.\nOn \"non-outside\" events, subscriber.t is set to the node that first matches the selector\nso it can be used to set as e.target in the final subscriber",
            "itemtype": "method",
            "name": "_selToFunc",
            "params": [
                {
                    "name": "subscriber",
                    "description": "Subscriber-object",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "css-selector",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whetrer it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 365,
            "description": "Transports DOM-events to the Event-system. Catches events at their most early stage:\ntheir capture-phase. When these events happen, a new customEvent is generated by our own\nEventsystem, by calling _evCallback(). This way we keep DOM-events and our Eventsystem completely separated.",
            "itemtype": "method",
            "name": "_setupDomListener",
            "params": [
                {
                    "name": "instanceEvent",
                    "description": "The Event-system",
                    "type": "Object"
                },
                {
                    "name": "customEvent",
                    "description": "the customEvent that is transported to the eventsystem",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 412,
            "description": "Generates a sort-function. Overrides _sortSubs from `event-base`.",
            "itemtype": "method",
            "name": "_sortSubs",
            "params": [
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "sortable function",
                "type": "Function|undefined"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-dom/event-dom.js",
            "line": 428,
            "description": "Sort nodes conform the dom-tree by looking at their position inside the tree.",
            "itemtype": "method",
            "name": "_sortSubsDOM",
            "params": [
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "sortable function",
                "type": "Function"
            },
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-dom"
        },
        {
            "file": "src/event-hammerjs/event-hammer.js",
            "line": 47,
            "description": "The (only) Hammer-instance that `Event` uses. It is bound to the `body`-element.",
            "itemtype": "property",
            "name": "hammertime",
            "type": "Hammer-instance",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "src/event-hammerjs/event-hammer.js",
            "line": 58,
            "description": "Adds the `Hammer`-class to Event, so it can be used from within Event.",
            "itemtype": "property",
            "name": "Hammer",
            "type": "Hammer",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "src/event-hammerjs/event-hammer.js",
            "line": 69,
            "description": "Flag to tell wether to emit an 'hammerinput' event before ALL events\nwhich is handy when debugging",
            "itemtype": "property",
            "name": "_emitHammerInput",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Event",
            "module": "event",
            "submodule": "event-hammerjs"
        },
        {
            "file": "src/io/io-assets.js",
            "line": 26,
            "description": "Creates a `<style>` tag to load the CSS file at the given url.",
            "itemtype": "method",
            "name": "getCSS",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the style sheet  to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-assets"
        },
        {
            "file": "src/io/io-assets.js",
            "line": 44,
            "description": "Creates a `<script>` tag to load the script at the given url.",
            "itemtype": "method",
            "name": "getJS",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the style sheet  to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-assets"
        },
        {
            "file": "src/io/io-jsonp.js",
            "line": 27,
            "description": "Creates a `<style>` tag to load the CSS file at the given url.",
            "itemtype": "method",
            "name": "readObjectJSONP",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the style sheet  to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-jsonp"
        },
        {
            "file": "src/io/io-node.js",
            "line": 39,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\n\nThe promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range.\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nCORS is supported, as long as the responseserver is set up to:\n     a) has a response header which allows the clientdomain:\n        header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n     b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n        to requests with the OPTION-method\n     More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/",
            "itemtype": "method",
            "name": "_xhr",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "data",
                            "description": "Data to be sent to the server, either to be used by `query-params` or `body`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-node"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 72,
            "description": "Initiates the `XMLHttpRequest()`-instance. Tries to use XMLHttpRequest2, which is supported by all modern browsers except IE<10\nif XMLHttpRequest2 fails, it will try to use IE's XDomainRequest.\n\nThe returned xhr DOES support CORS for all modern browsers.\nTo use CORS, you need to setup the responseserver right\nMore info about CORS: http://remysharp.com/2011/04/21/getting-cors-working/\n\nUsing CORS with IE9-browsers need special consideration, for it uses the XDomainRequest():\n1. Only GET and POST methods are supported. Other methods will be reset into one of these,\n   so make sure the cross-domain-server handles all requests as being send with the GET or POST method.\n2. Only text/plain is supported for the request's Content-Type header. This will lead into troubles when handling\n   POST-requests: the cross-domain-server needs to extract the parameters itself. For nodejs, there is a nice npm module:\n   `express-ie-cors` https://github.com/advanced/express-ie-cors/blob/master/lib/express-ie-cors.js\n3. No custom headers can be added to the request.\n4. No authentication or cookies will be sent with the request.\nmore info: http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx",
            "itemtype": "method",
            "name": "_createXHR",
            "params": [
                {
                    "name": "url",
                    "description": "in case XMLHttpRequest2 is not available, we must determine whether to create a crossdomain-request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "xhr-instance",
                "type": "XMLHttpRequest2|XMLHttpRequest|XDomainRequest"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 104,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\nUses `Promise.stream`, defined inside the `core-promiseext` module",
            "itemtype": "method",
            "name": "_xhrStream",
            "params": [
                {
                    "name": "streamback",
                    "description": "callbackfunction to process stream-information. Streamed data is available inside the argument if the callback.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\non success:\ndata {Array} holding the streamed items: each response is a String-item in the array\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 142,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\n\nThe promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range.\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nCORS is supported, as long as the responseserver is set up to:\n     a) has a response header which allows the clientdomain:\n        header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n     b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n        to requests with the OPTION-method\n     More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/",
            "itemtype": "method",
            "name": "xhr",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "streamback",
                            "description": "callbackfunction in case you want to process streams.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\non success:\ndata {Array|Any} in case `streamback` is set, data will always be an array, otherwise its the plain serverresponse.\nxhr {XMLHttpRequest|XDomainRequest} xhr-response, in case `streamback` is set, with an extra property:\n         `xhr.data` {Array} an array where every single stream-resonse is an array-item\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 188,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\nThis method is the standard way of doing xhr-requests without processing streams.",
            "itemtype": "method",
            "name": "_xhr",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\non success:\nxhr {XMLHttpRequest|XDomainRequest} xhr-response\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 236,
            "description": "Adds the `xhr.onprogress()` method on the xhr-instance which is used by xhr when events occur.\n\nThis events is responsible for sending partial data to the streamcallback",
            "itemtype": "method",
            "name": "_setProgressHandle",
            "params": [
                {
                    "name": "xhr",
                    "description": "containing the xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "promise",
                    "description": "reference to the Promise created by _xhr",
                    "type": "Promise"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 260,
            "description": "Performs an AJAX GET request.  Shortcut for a call to [`xhr`](#method_xhr) with `method` set to  `'GET'`.\nExpects the server to response streamwise (though not necessary).\n\nAdditional parameters can be on the url (with questionmark), through `params`, or both.\n\nYou can use the `streamback` function to process intermediate serverresponses\nThe resolved Promise-callback returns an array where each item represents a serverresponse.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.",
            "itemtype": "method",
            "name": "getStream",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "additional parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "streamback",
                    "description": "callbackfunction to process stream-information. Streamed data is available inside the argument if the callback.",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\ndata {Array} holding the streamed items: each response is a String-item in the array\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-stream.js",
            "line": 304,
            "description": "Performs an AJAX request with the GET HTTP method.\nExpects the server to response a JSON-array or JSON-object.\nExpects the server to response streamwise (though not necessary). A typical usage would be\nto response with small array-subsets.\n\n`streamback` gets invoked with every streamed response, passing an array at its argument which holds\nthe items of this partial response.\nThe resolved Promise-callback returns an array which holds all the items.\n\nAdditional request-parameters can be on the url (with questionmark), through `params`, or both.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: CORS is supported, as long as the responseserver is set up to:\n      a) has a response header which allows the clientdomain:\n         header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n      b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n         to requests with the OPTION-method\n      More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/\nNote2: If you expect the server to response with data that consist of Date-properties, you should set `options.parseJSONDate` true.\n       Parsing takes a bit longer, but it will generate trully Date-objects.",
            "itemtype": "method",
            "name": "readStreamedArray",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "additional parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "streamback",
                    "description": "function with 1 argument (items) which gets invoked on every partial response.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "parseJSONDate",
                            "description": "Whether the server returns JSON-stringified data which has Date-objects.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nObject received data\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 33,
            "description": "Performs an AJAX GET request.  Shortcut for a call to [`xhr`](#method_xhr) with `method` set to  `'GET'`.\nAdditional parameters can be on the url (with questionmark), through `params`, or both.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote: `params` should be a plain object with only primitive types which are transformed into key/value pairs.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "additional parameters.\n       should be a plain object with only primitive types which are transformed into key/value pairs.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "Force the response type.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nxhr {XMLHttpRequest|XDomainRequest} xhr-response\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 78,
            "description": "Performs an AJAX request with the GET HTTP method and expects a JSON-object.\nThe resolved Promise-callback returns an object (JSON-parsed serverresponse).\n\nAdditional request-parameters can be on the url (with questionmark), through `params`, or both.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: If you expect the server to response with data that consist of Date-properties, you should set `options.parseJSONDate` true.\n       Parsing takes a bit longer, but it will generate trully Date-objects.\nNote2: CORS is supported, as long as the responseserver is set up to:\n      a) has a response header which allows the clientdomain:\n         header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n      b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n         to requests with the OPTION-method\n      More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/",
            "itemtype": "method",
            "name": "read",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "additional parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "parseJSONDate",
                            "description": "Whether the server returns JSON-stringified data which has Date-objects.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nObject received data\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 140,
            "description": "Sends data (object) which will be JSON-stringified before sending.\nPerforms an AJAX request with the PUT HTTP method by default.\nWhen options.allfields is `false`, it will use the POST-method: see Note2.\n\nThe 'content-type' of the header is set to 'application/json', overruling manually options.\n\n'data' is send as 'body.data' and should be JSON-parsed at the server.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: The server needs to inspect the bodyparam: 'action', which always equals 'update'.\n       'body.action' is the way to distinquish 'I.IO.updateObject' from 'I.IO.insertObject'.\n       On purpose, we didn't make this distinction through a custom CONTENT-HEADER, because\n       that would lead into a more complicated CORS-setup (see Note3)\nNote2: By default this method uses the PUT-request: which is preferable is you send the WHOLE object.\n       if you send part of the fields, set `options.allfields`=false.\n       This will lead into using the POST-method.\n       More about HTTP-methods: https://stormpath.com/blog/put-or-post/\nNote3: CORS is supported, as long as the responseserver is set up to:\n       a) has a response header which allows the clientdomain:\n          header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n       b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n          to requests with the OPTION-method\n       More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/\nNote4: If the server response JSON-stringified data, the Promise resolves with a JS-Object. If you expect this object\n       to consist of Date-properties, you should set `options.parseJSONDate` true. Parsing takes a bit longer, but it will\n       generate trully Date-objects.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be sent, might be a Promise which resolves with the data-object.",
                    "type": "Object|Promise"
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "allfields",
                            "description": "to specify that all the object-fields are sent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "parseJSONDate",
                            "description": "Whether the server returns JSON-stringified data which has Date-objects.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nresponse {Object} usually, the final object-data, possibly modified\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 188,
            "description": "Performs an AJAX request with the POST HTTP method by default.\nWhen options.allfields is `true`, it will use the PUT-method: see Note2.\nThe send data is an object which will be JSON-stringified before sending.\n\nThe 'content-type' of the header is set to 'application/json', overruling manually options.\n\n'data' is send as 'body.data' and should be JSON-parsed at the server.\n'body.action' has the value 'insert'\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: The server needs to inspect the bodyparam: 'action', which always equals 'insert'.\n       'body.action' is the way to distinquish 'I.IO.insertObject' from 'I.IO.updateObject'.\n       On purpose, we didn't make this distinction through a custom CONTENT-HEADER, because\n       that would lead into a more complicated CORS-setup (see Note3)\nNote2: By default this method uses the POST-request: which is preferable if you don't know all the fields (like its unique id).\n       if you send ALL the fields, set `options.allfields`=true.\n       This will lead into using the PUT-method.\n       More about HTTP-methods: https://stormpath.com/blog/put-or-post/\nNote3: CORS is supported, as long as the responseserver is set up to:\n       a) has a response header which allows the clientdomain:\n          header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n       b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n          to requests with the OPTION-method\n       More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/\nNote4: If the server response JSON-stringified data, the Promise resolves with a JS-Object. If you expect this object\n       to consist of Date-properties, you should set `options.parseJSONDate` true. Parsing takes a bit longer, but it will\n       generate trully Date-objects.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be sent, might be a Promise which resolves with the data-object.",
                    "type": "Object|Promise"
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "allfields",
                            "description": "to specify that all the object-fields are sent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "parseJSONDate",
                            "description": "Whether the server returns JSON-stringified data which has Date-objects.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nresponse {Object} usually, the final object-data, possibly modified, holding the key\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 236,
            "description": "Performs an AJAX request with the PUT HTTP method by default.\nWhen options.allfields is `false`, it will use the POST-method: see Note2.\nThe send data is an object which will be JSON-stringified before sending.\n\nThe 'content-type' of the header is set to 'application/json', overruling manually options.\n\n'data' is send as 'body.data' and should be JSON-parsed at the server.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: By default this method uses the PUT-request: which is preferable is you send the WHOLE object.\n       if you send part of the fields, set `options.allfields`=false.\n       This will lead into using the POST-method.\n       More about HTTP-methods: https://stormpath.com/blog/put-or-post/\nNote2: CORS is supported, as long as the responseserver is set up to:\n       a) has a response header which allows the clientdomain:\n          header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n       b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n          to requests with the OPTION-method\n       More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/\nNote3: If the server response JSON-stringified data, the Promise resolves with a JS-Object. If you expect this object\n       to consist of Date-properties, you should set `options.parseJSONDate` true. Parsing takes a bit longer, but it will\n       generate trully Date-objects.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Data to be sent.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "allfields",
                            "description": "to specify that all the object-fields are sent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nresponse {Object|String} any response you want the server to return.\n                      If the server send back a JSON-stringified object, it will be parsed to return as a full object\n                      You could set `options.parseJSONDate` true, it you want ISO8601-dates to be parsed as trully Date-objects\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-transfer.js",
            "line": 322,
            "description": "Performs an AJAX DELETE request.  Shortcut for a call to [`xhr`](#method_xhr) with `method` set to  `'DELETE'`.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote: `data` should be a plain object with only primitive types which are transformed into key/value pairs.",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "deleteKey",
                    "description": "Indentification of the id that has to be deleted. Typically an object like: {id: 12}\n                 This object will be passed as the request params.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nxhr {XMLHttpRequest|XDomainRequest} xhr-response\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-transfer"
        },
        {
            "file": "src/io/io-win.js",
            "line": 70,
            "description": "Initializes the xhr-instance, based on the config-params.\nThis method is the standard way of doing xhr-requests without processing streams.",
            "itemtype": "method",
            "name": "_initXHR",
            "params": [
                {
                    "name": "xhr",
                    "description": "xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Data to be sent to the server, either to be used by `query-params` or `body`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "Force the response type.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "fulfill",
                    "description": "reference to xhr-promise's fulfill-function",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "reference to xhr-promise's reject-function",
                    "type": "Function"
                },
                {
                    "name": "promise",
                    "description": "the xhr-promise which will be extended with the `abort()`-method",
                    "type": "Promise"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "src/io/io-win.js",
            "line": 150,
            "description": "Adds the `headers`-object to `xhr`-headers.",
            "itemtype": "method",
            "name": "_setHeaders",
            "params": [
                {
                    "name": "xhr",
                    "description": "containing the xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "headers",
                    "description": "containing all headers",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "the request-method used",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "src/io/io-win.js",
            "line": 180,
            "description": "Adds 2 methods on the xhr-instance which are used by xhr when events occur:\n\nxhr.onreadystatechange()\nxhr.ontimeout()  // only XMLHttpRequest2\n\nThese events are responsible for making the Promise resolve.",
            "itemtype": "method",
            "name": "_setReadyHandle",
            "params": [
                {
                    "name": "xhr",
                    "description": "containing the xhr-instance",
                    "type": "Object"
                },
                {
                    "name": "fulfill",
                    "description": "reference to the Promise fulfill-function",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "reference to the Promise reject-function",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "src/io/io-win.js",
            "line": 218,
            "description": "Stringifies an object into one string with every pair separated by `&`",
            "itemtype": "method",
            "name": "_toQueryString",
            "params": [
                {
                    "name": "data",
                    "description": "containing key-value pairs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "stringified presentation of the object, with every pair separated by `&`",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "src/io/io-win.js",
            "line": 239,
            "description": "Sends a HTTP request to the server and returns a Promise with an additional .abort() method to cancel the request.\nThis method is the standard way of doing xhr-requests without processing streams.",
            "itemtype": "method",
            "name": "_xhr",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "method",
                            "description": "The HTTP method to use.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'GET'"
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "data",
                            "description": "Data to be sent to the server, either to be used by `query-params` or `body`.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "Force the response type.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "streamback",
                            "description": "callbackfunction in case you want to process streams (needs io-stream module).",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise holding the request. Has an additional .abort() method to cancel the request.\n<ul>\n    <li>on success: xhr {XMLHttpRequest1|XMLHttpRequest2} xhr-response</li>\n    <li>on failure: reason {Error}</li>\n</ul>",
                "type": "Promise"
            },
            "access": "private",
            "tagname": "",
            "class": "IO",
            "module": "io",
            "submodule": "io-win"
        },
        {
            "file": "src/io/io-xml.js",
            "line": 29,
            "description": "Performs an AJAX request with the GET HTTP method and expects a JSON-object.\nThe resolved Promise-callback returns an object (JSON-parsed serverresponse).\n\nAdditional request-parameters can be on the url (with questionmark), through `params`, or both.\n\nThe Promise gets fulfilled if the server responses with `STATUS-CODE` in the 200-range (excluded 204).\nIt will be rejected if a timeout occurs (see `options.timeout`), or if `xhr.abort()` gets invoked.\n\nNote1: If you expect the server to response with data that consist of Date-properties, you should set `options.parseJSONDate` true.\n       Parsing takes a bit longer, but it will generate trully Date-objects.\nNote2: CORS is supported, as long as the responseserver is set up to:\n      a) has a response header which allows the clientdomain:\n         header('Access-Control-Allow-Origin: http://www.some-site.com'); or header('Access-Control-Allow-Origin: *');\n      b) in cae you have set a custom HEADER (through 'options'), the responseserver MUST listen and respond\n         to requests with the OPTION-method\n      More info:  allows to send to your domain: see http://remysharp.com/2011/04/21/getting-cors-working/",
            "itemtype": "method",
            "name": "readXML",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource server",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "additional parameters.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "See also: [`I.io`](#method_xhr)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "url",
                            "description": "The url to which the request is sent.\n   can be ignored, even if streams are used --> the returned Promise will always hold all data",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sync",
                            "description": "By default, all requests are sent asynchronously. To send synchronous requests, set to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "params",
                            "description": "Data to be sent to the server.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "description": "The content for the request body for POST method.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "headers",
                            "description": "HTTP request headers.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "responseType",
                            "description": "The response type.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'text'"
                        },
                        {
                            "name": "timeout",
                            "description": "to timeout the request, leading into a rejected Promise.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "withCredentials",
                            "description": "Whether or not to send credentials on the request.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "parseJSONDate",
                            "description": "Whether the server returns JSON-stringified data which has Date-objects.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "on success:\nObject received data\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "class": "IO",
            "module": "io",
            "submodule": "io-xml"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 53,
            "description": "Loops through all properties in the object.  Equivalent to Array.forEach.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 80,
            "description": "Loops through the properties in an object until the callback function returns *truish*.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe order in which the elements are visited is not predictable.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if the loop was interrupted by the callback function returning *truish*.",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 108,
            "description": "Loops through the properties in an object until the callback assembling a new object\nwith its properties set to the values returned by the callback function.\nIf the callback function returns `undefined` the property will not be copied to the new object.\nThe resulting object will have the same keys as the original, except for those where the callback\nreturned `undefined` which will have dissapeared.\nThe callback is provided with the value of the property, the name of the property\nand a reference to the whole object itself.\nThe context to run the callback in can be overriden, otherwise it is undefined.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to be executed on each item in the object.  It will receive\n                     value {any} value of the property\n                     key {string} name of the property\n                     obj {Object} the whole of the object",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The new object with its properties set to the values returned by the callback function.",
                "type": "Object"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 140,
            "description": "Returns the keys of the object.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "Keys of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 149,
            "description": "Loops through the object collection the values of all its properties.\nIt is the counterpart of the [`keys`](#method_keys).",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "values of the object",
                "type": "Array"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 169,
            "description": "Returns true if the object has no own members",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "true if the object is empty",
                "type": "Boolean"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 182,
            "description": "Returns a shallow copy of the object.\nIt does not clone objects within the object, it does a simple, shallow clone.\nFast, mostly useful for plain hash maps.",
            "itemtype": "method",
            "name": "shallowClone",
            "return": {
                "description": "shallow copy of the original",
                "type": "Object"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 203,
            "description": "Merges into this object the properties of the given object.\nIf the second argument is true, the properties on the source object will be overwritten\nby those of the second object of the same name, otherwise, they are preserved.",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "obj",
                    "description": "Object with the properties to be added to the original object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, the properties in `obj` will override those of the same name\n       in the original object",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 228,
            "description": "Returns a new object resulting of merging the properties of the given objects.\nThe copying is shallow, complex properties will reference the very same object.\nProperties in later objects do **not overwrite** properties of the same name in earlier objects.\nIf any of the objects is missing, it will be skiped.",
            "example": [
                "\n\n\tvar foo = function (config) {\n\t\t config = Object.merge(config, defaultConfig);\n\t}"
            ],
            "itemtype": "method",
            "name": "merge",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "Objects whose properties are to be merged",
                    "type": "Object",
                    "multiple": true
                }
            ],
            "return": {
                "description": "new object with the properties merged in.",
                "type": "Object"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 258,
            "description": "Merges the given map of properties into the `prototype` of the Class.\n**Not** to be used on instances.\n\nThe members in the hash map will become members with\ninstances of the merged class.\n\nBy default, this method will not override existing prototype members, \nunless the second argument `force` is true.\n\nWhen `force` is true and the replacement is a function, \nthe original method is prepended to the list of arguments of the new method.\nIt is the responsibility of the developer to call the original \nto preserve the inheritance chain.",
            "itemtype": "method",
            "name": "mergePrototypes",
            "params": [
                {
                    "name": "map",
                    "description": "Hash map of properties to add to the prototype of this object",
                    "type": "Object"
                },
                {
                    "name": "force",
                    "description": "If true, existing members will be overwritten",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "Function",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 308,
            "description": "Returns a newly created class inheriting from this class\nusing the given `constructor` with the\nprototypes listed in `prototypes` merged in.\n\n\nThe newly created class has the `$super` static property\navailable to access all of is ancestor's instance methods.\n\nFurther methods can be added via the [mergePrototypes](#method_mergePrototypes).",
            "example": [
                "\n\n\tvar Circle = Shape.subClass(\n\t\tfunction (x, y, r) {\n\t\t\tthis.r = r;\n\t\t\tCircle.$super.constructor.call(this, x, y);\n\t\t},\n\t\t{\n\t\t\tarea: function () {\n\t\t\t\treturn this.r * this.r * Math.PI;\n\t\t\t}\n\t\t}\n\t);"
            ],
            "itemtype": "method",
            "name": "subClass",
            "params": [
                {
                    "name": "constructor",
                    "description": "The function that will serve as constructor for the new class.\n       If `undefined` defaults to `Object.constructor`",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "prototypes",
                    "description": "Hash map of properties to be added to the prototype of the new class.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new class."
            },
            "class": "Function",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 372,
            "description": "Sets the context of which the function will be execute. in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.",
            "itemtype": "method",
            "name": "rbind",
            "params": [
                {
                    "name": "context",
                    "description": "the execution context.\n       The value is ignored if the bound function is constructed using the new operator.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "args*",
                    "description": "args* 0..n arguments to append to the end of\n       arguments collection supplied to the function.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "the wrapped function.",
                "type": "Function"
            },
            "class": "Function",
            "module": "Object"
        },
        {
            "file": "src/lang-ext/lang-ext.js",
            "line": 407,
            "description": "Returns a base class with the given constructor and prototype methods",
            "itemtype": "method",
            "name": "createClass",
            "params": [
                {
                    "name": "constructor",
                    "description": "constructor for the class",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "prototype",
                    "description": "Hash map of prototype members of the new class",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new class",
                "type": "Function"
            },
            "class": "Object",
            "module": "Object"
        },
        {
            "file": "src/parcel/events.js",
            "line": 34,
            "description": "Holds all event-listener methods.\nThe returned object should be merged into any Class-instance or object you want to\nextend with the listener-methods, so the appropriate methods can be invoked on the instance.\n\nSee [Event.listener](Event.listener.html) for all properties that can be merged.",
            "example": [
                "\n    var blueObject = {};\n    blueObject.merge(Event.Listener);\n    blueObject.after('*:save', function(e) {\n        ...\n    });",
                "\n    Members.mergePrototypes(Event.Listener);\n    var myMembers = new Members();\n    myMembers.after('PersonalProfile:save', function(e) {\n        ...\n    });"
            ],
            "itemtype": "property",
            "name": "EventListener",
            "type": "Object",
            "since": "0.0.1",
            "class": "Parcel",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 83,
            "description": "Given a domnode and a parcel, this method returns an object from the parcel\nwith information about which vNode corresponds with the domnode and the parcelTree towards\nthis vNode.",
            "itemtype": "method",
            "name": "_getPVnode",
            "params": [
                {
                    "name": "parcel",
                    "description": "Parcelinstance to search through",
                    "type": "Parcel"
                },
                {
                    "name": "domnode",
                    "description": "DOMnode to search for",
                    "type": "DOMnode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "undefined when `domnode` is not within the parcel, the object has 2 properties:\n<ul>\n    <li>vNode: vNode that corresponds with domnode</li>\n    <li>parcelTree: array with Parcels downto the parcel that holds vNode. Top down: the first item\n        is the parcel that was passed through as first argument</li>\n</ul>",
                "type": "Object|undefined"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 141,
            "description": "Does the actual invocation of a subscriber. Overrides _invokesSubs from `event-base`.",
            "itemtype": "method",
            "name": "_invokeSubs",
            "params": [
                {
                    "name": "e",
                    "description": "event-object",
                    "type": "Object"
                },
                {
                    "name": "subscribers",
                    "description": "contains subscribers (objects) with these members:\n<ul>\n    <li>subscriber.o {Object} context of the callback</li>\n    <li>subscriber.cb {Function} callback to be invoked</li>\n    <li>subscriber.f {Function} filter to be applied</li>\n    <li>subscriber.t {DOM-node|pNode|vNode} target for the specific selector, which will be set as e.target\n        only when event-dom is active and there are filter-selectors</li>\n    <li>subscriber.n {DOM-node|pNode} highest dom-node that acts as the container for delegation.\n        only when core-event-dom is active and there are filter-selectors</li>\n</ul>",
                    "type": "Array"
                },
                {
                    "name": "before",
                    "description": "whether it concerns before subscribers",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "a sort function to controll the order of execution.\n            Only applyable when working with DOM-events (bubble-order), provided by `core-event-dom`",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 261,
            "description": "Creates a filterfunction out of a css-selector. To be used for catching any dom-element\nthat happens on domnodes within the parcel-instance. Makes e.target to reurn the vNode.\nalso adds e.parcelTree which is the tree of all Parcel-instances between the Parcel that\ngot the subscriber and the vNode that where there was a match with the selector.\n\nOn \"non-outside\" events, subscriber.t is set to the node that first matches the selector\nso it can be used to set as e.target in the final subscriber",
            "itemtype": "method",
            "name": "_parcelSelToDom",
            "params": [
                {
                    "name": "subscriber",
                    "description": "Subscriber-object",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "css-selector",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whetrer it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 320,
            "description": "Creates a filterfunction out of a css-selector.\nOn \"non-outside\" events, subscriber.t is set to the node that first matches the selector\nso it can be used to set as e.target in the final subscriber",
            "itemtype": "method",
            "name": "_selToFunc",
            "params": [
                {
                    "name": "subscriber",
                    "description": "Subscriber-object",
                    "type": "Object"
                },
                {
                    "name": "selector",
                    "description": "css-selector",
                    "type": "String"
                },
                {
                    "name": "outsideEvent",
                    "description": "whetrer it is an outside-event (like `clickoutside`)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 391,
            "description": "Sort nodes conform the dom-tree by looking at their position inside the tree.\noverrules '_sortSubsDOM' from",
            "itemtype": "method",
            "name": "_sortSubsDOM",
            "params": [
                {
                    "name": "customEvent",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "sortable function",
                "type": "Function"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 421,
            "description": "Defines an emitterName into the instance.\nThis will add a protected property `_emitterName` to the instance. If you need an emitterName on\nthe Class, you should use the Event.Emitter helper: `ClassName.mergePrototypes(Event.Emitter(emitterName));`",
            "static": 1,
            "itemtype": "method",
            "name": "defineEmitter",
            "params": [
                {
                    "name": "emitterName",
                    "description": "identifier that will be added when events are sent (`emitterName:eventName`)",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 436,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.",
            "itemtype": "method",
            "name": "after",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 459,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.",
            "itemtype": "method",
            "name": "before",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 482,
            "description": "Detaches (unsubscribes) the listener from the specified customEvent,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detach",
            "params": [
                {
                    "name": "customEvent",
                    "description": "conform the syntax: `emitterName:eventName`, wildcard `*` may be used for both\n       `emitterName` as well as only `eventName`, in which case 'UI' will become the emitterName.",
                    "type": "String"
                }
            ],
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 495,
            "description": "Detaches (unsubscribes) the listener from all customevents,\non behalf of the object who calls this method.",
            "itemtype": "method",
            "name": "detachAll",
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 506,
            "description": "Alias for `after`.\n\nSubscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 531,
            "description": "Alias for `onceAfter`.\n\nSubscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 558,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `after` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceAfter",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of after-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/events.js",
            "line": 583,
            "description": "Subscribes to a customEvent on behalf of the object who calls this method.\nThe callback will be executed `before` the defaultFn.\nThe subscriber will be automaticly removed once the callback executed the first time.\nNo need to `detach()` (unless you want to undescribe before the first event)",
            "itemtype": "method",
            "name": "onceBefore",
            "params": [
                {
                    "name": "customEvent",
                    "description": "the custom-event (or Array of events) to subscribe to. CustomEvents should\n       have the syntax: `emitterName:eventName`. Wildcard `*` may be used for both `emitterName` as well as `eventName`.\n       If `emitterName` is not defined, `UI` is assumed.",
                    "type": "String|Array"
                },
                {
                    "name": "callback",
                    "description": "subscriber:will be invoked when the event occurs. An `eventobject` will be passed\n       as its only argument.",
                    "type": "Function"
                },
                {
                    "name": "filter",
                    "description": "to filter the event.\n       Use a String if you want to filter DOM-events by a `selector`\n       Use a function if you want to filter by any other means. If the function returns a trully value, the\n       subscriber gets invoked. The function gets the `eventobject` as its only argument and the context is\n       the subscriber.",
                    "type": "String|Function",
                    "optional": true
                },
                {
                    "name": "prepend",
                    "description": "whether the subscriber should be the first in the list of before-subscribers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "handler with a `detach()`-method which can be used to detach the subscriber",
                "type": "Object"
            },
            "since": "0.0.1",
            "class": "Parcel.EventListener",
            "module": "parcel",
            "submodule": "parcel-event-listener"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 29,
            "description": "Provides the initialization of the parcel, called by the constructor of the parcel with all its arguments.\n\nThe provided method is empty, it can be overriden by each Parcela app.\n\nSet up event listeners, initialize variables and models and prepare for operation.",
            "itemtype": "method",
            "name": "init",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 40,
            "description": "Destructor.  \n\nThe provided method checks all the instance properties and if any of them are \ninstances of Parcel or arrays of Parcel instances, \nit will call the `destroy` method on each of the child parcels.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 69,
            "description": "Called by the renderer before this Parcel is shown for the first time.\nIt is a good place to activate resources that are only usefull while the \nparcel is visible such as animations.\n\nThe provided method is empty, it can be overriden by each Parcela app.",
            "itemtype": "method",
            "name": "preView",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 80,
            "description": "Called by the renderer after this Parcel is hidden.\n\nIt is a good place to deactivate resources that are only usefull while the \nparcel is visible such as animations.\n\nThe provided method is empty, it can be overriden by each Parcela app.",
            "itemtype": "method",
            "name": "postView",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 93,
            "description": "Returns the virtual DOM for this parcel.\n\nMust be overriden by each Parcela app.\n\nA virtual DOM node is composed of the following elements:\n\n* `tag` {String}:  Name of the HTML tag for the node to be created.\n* `attrs` {Object}: Collection of HTML attributes to be added to the node.\n* `children` {Array}: Array of virtual DOM nodes that will become children of the created node.\n\nThis method will usually use the [`ITSA.vNode`](ITSA.html#method_vNode)\nhelper function to produce the virtual DOM node.",
            "example": [
                "\n\tview: function () {\n\t\tvar v = I.Parcel.vNode;\n\t\treturn v('div', [\n\t\t\tv('p.joyful','Hello Workd!'),\n\t\t\tv('hr'),\n\t\t\tv('p','(Not very original, really)')\n\t\t]);\n\t}\n\n\t// Equivalent to:\n\tview: function () {\n\t\treturn {tag:'div', attrs:{},children: [\n\t\t\t{tag:'p', attrs:{class:'joyful'}, children:['Hellow World!']},\n\t\t\t{tag:'hr', attrs: {}, children: []},\n\t\t\t{tag:'p', attrs:{}, children:['(Not very original, really)']}\n\t\t]};\n\t}"
            ],
            "itemtype": "method",
            "name": "view",
            "return": {
                "description": "The expected virtual DOM for this parcel.",
                "type": "VNode"
            },
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 132,
            "description": "Returns a value representative of the state of this parcel.\nThe system will compare it with the previous state and if they match,\nit will assume the view has not changed.\n\nThe default function returns `NaN` which is always different than itself.\nIt may be overriden for optimization purposes.",
            "itemtype": "method",
            "name": "stamp",
            "return": {
                "description": "any simple value (no objects or such) that reflects the state of this view",
                "type": "Value"
            },
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 145,
            "description": "Provides default initialization values for the configuration of this Parcel.\nIt is used by the constructor to merge it with the `config` values it might have\nreceived.\n\nThe constructor only makes a shallow copy of the values in the hash.\nObject references must be initialized in the [`init`](#method_init) method,\notherwise they would all point to the very same copy.",
            "itemtype": "property",
            "name": "defaultConfig",
            "type": "Object",
            "default": "undefined",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 159,
            "description": "Type of DOM element that will be created to serve as a container for this Parcel.\nDefaults to a `DIV`",
            "itemtype": "property",
            "name": "containerType",
            "type": "String",
            "default": "DIV",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcel/parcel.js",
            "line": 169,
            "description": "CSS className to add to the container for this parcel.\nThis is in addition to the className of `parcel` which is\nautomatically added to all Parcel containers.",
            "itemtype": "property",
            "name": "className",
            "type": "String",
            "default": "''",
            "class": "Parcel",
            "module": "core",
            "submodule": "parcel"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 68,
            "description": "Global configuration properties for the Parcela object.\nIt can only be set on initialization via the [`Parcela`](#docs-main) function.\n\nThe config is set at a default-configutation",
            "itemtype": "property",
            "name": "_config",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 100,
            "description": "Reference to the `idGenerator` function in [utils](../modules/utils.html)",
            "itemtype": "property",
            "name": "idGenerator",
            "type": "function",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 107,
            "description": "Reference to the `typeOf` function in [utils](../modules/utils.html)",
            "itemtype": "property",
            "name": "typeOf",
            "type": "function",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 117,
            "description": "Reference to the [IO](io.html) object",
            "itemtype": "property",
            "name": "IO",
            "type": "Object",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 127,
            "description": "[Event](Event.html)-instance",
            "itemtype": "property",
            "name": "Event",
            "type": "Event",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 155,
            "description": "Reference to the [Parcel](Parcel.html) static class",
            "itemtype": "property",
            "name": "Parcel",
            "type": "Parcel",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 165,
            "description": "Reference to the virtual DOM [render](vDOM.html#method_render) method",
            "itemtype": "property",
            "name": "render",
            "type": "Function",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 176,
            "description": "Reference to the [routing module](Router.html).",
            "itemtype": "property",
            "name": "Router",
            "type": "Function",
            "static": 1,
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/parcela/parcela.js",
            "line": 193,
            "description": "Returns a promise when the DOM and Parcela library are ready.\n\nThe callback receives a copy of `Parcela` as its only argument so that the developer can use a shorter name within the application.\nIt is often called simply `P`.\n\nCalling the Parcela function is optional. If the default configuration is acceptable,\nthe Parcela class can be used directly.",
            "example": [
                "\n <script>\n     Parcela.ready\n     .then(function (P) {\n         // P is an alias of Parcela\n     });\n </script>",
                "\n <script>\n     Parcela({base: '/build'}).ready\n     .then(function (P) {\n         // P is an alias of Parcela\n     });\n </script>"
            ],
            "itemtype": "property",
            "name": "ready",
            "type": "Promise",
            "class": "Parcela",
            "module": "Parcela"
        },
        {
            "file": "src/promise-ext/promise-ext.js",
            "line": 17,
            "description": "Returns a Promise that always fulfills. It is fulfilled when ALL items are resolved (either fulfilled\nor rejected). This is useful for waiting for the resolution of multiple\npromises, such as reading multiple files in Node.js or making multiple XHR\nrequests in the browser. Because -on the contrary of `Promise.all`- **finishAll** waits until\nall single Promises are resolved, you can handle all promises, even if some gets rejected.",
            "itemtype": "method",
            "name": "finishAll",
            "params": [
                {
                    "name": "items",
                    "description": "an array of any kind of items, promises or not. If a value is not a promise,\nits transformed into a resolved promise.",
                    "type": "Any[]"
                }
            ],
            "return": {
                "description": "A promise for an array of all the fulfillment items:\n<ul>\n    <li>Fulfilled: o {Object}\n        <ul>\n            <li>fulfilled {Array} all fulfilled responses, any item that was rejected will have a value of `undefined`</li>\n            <li>rejected {Array} all rejected responses, any item that was fulfilled will have a value of `undefined`</li>\n        </ul>\n    </li>\n    <li>Rejected: this promise **never** rejects</li>\n</ul>",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "Promise",
            "submodule": "promise-ext"
        },
        {
            "file": "src/promise-ext/promise-ext.js",
            "line": 81,
            "description": "Returns a Promise which chains the function-calls. Like an automated Promise-chain.\nInvokes the functionreferences in a chain. You MUST supply function-references, it doesn't\nmatter wheter these functions return a Promise or not. Any returnvalues are passed through to\nthe next function.\n\n**Cautious:** you need to pass function-references, not invoke them!\nchainFns will invoke them when the time is ready. Regarding to this, there is a difference with\nusing Promise.all() where you should pass invoked Promises.\n\nIf one of the functions returns a Promise, the chain\nwill wait its execution for this function to be resolved.\n\nIf you need specific context or arguments: use Function.bind for these items.\nIf one of the items returns a rejected Promise, by default: the whole chain rejects\nand following functions in the chain will not be invoked. When `finishAll` is set `true`\nthe chain will always continue even with rejected Promises.\n\nReturning functionvalues are passed through the chain adding them as an extra argument\nto the next function in the chain (argument is added on the right)",
            "example": [
                "\n    var a = [], p1, p2, p3;\n    p1 = function(a) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                console.log('resolving promise p1: '+a);\n                resolve(a);\n            }, 1000);\n        });\n    };\n    p2 = function(b, r) {\n        var value = b+r;\n        console.log('returning p2: '+value);\n        return value;\n    };\n    p3 = function(c, r) {\n        return new Promise(function(resolve, reject) {\n            I.later(function() {\n                var value = b+r;\n                console.log('resolving promise p3: '+value);\n                resolve(value);\n            }, 1000);\n        });\n    };\n    a.push(p1.bind(undefined, 100));\n    a.push(p2.bind(undefined, 200));\n    a.push(p3.bind(undefined, 300));\n    Promise.chainFns(a).then(\n        function(r) {\n            console.log('chain resolved with '+r);\n        },\n        function(err) {\n            console.log('chain-error '+err);\n        }\n    );"
            ],
            "itemtype": "method",
            "name": "chainFns",
            "params": [
                {
                    "name": "funcs",
                    "description": "an array of function-references",
                    "type": "Function[]"
                },
                {
                    "name": "finishAll",
                    "description": "to force the chain to continue, even if one of the functions\n       returns a rejected Promise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "on success:\no {Object} returnvalue of the laste item in the Promisechain\non failure an Error object\nreason {Error}",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "Promise",
            "submodule": "promise-ext"
        },
        {
            "file": "src/promise-ext/promise-ext.js",
            "line": 173,
            "description": "Promise which can be put at the very end of a chain, even after .catch().\nWill invoke the callback function regardless whether the chain resolves or rejects.\n\nThe argument of the callback will be either its fulfilled or rejected argument, but\nit is wisely not to handle it. The results should have been handled in an earlier step\nof the chain: .finally() basicly means you want to execute code after the chain, regardless\nwhether it's resolved or rejected.\n\n**Note:** .finally() <u>does not return a Promise</u>: it should be used as the very last step of a Promisechain.\nIf you need an intermediate method, you should take .thenFulfill().",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "finallyback",
                    "description": "the callbackfunctio to be invoked.",
                    "type": "Function"
                }
            ],
            "class": "Promise",
            "module": "Promise",
            "submodule": "promise-ext"
        },
        {
            "file": "src/promise-ext/promise-ext.js",
            "line": 193,
            "description": "Will always return a fulfilled Promise.\n\nTypical usage will be by making it part of a Promisechain: it makes the chain go\ninto its fulfilled phase.",
            "example": [
                "\n\npromise1\n.then(promise2)\n.thenFulfill()\n.then(handleFulfilled, handleRejected) // handleFulfilled always gets invoked"
            ],
            "itemtype": "method",
            "name": "thenFulfill",
            "params": [
                {
                    "name": "response",
                    "description": "parameter to pass through which overrules the original Promise-response.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Resolved Promise. `response` will be passed trough as parameter when set.\n        When not set: in case the original Promise resolved, its parameter is passed through.\n        in case of a rejection, no parameter will be passed through.",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "Promise",
            "submodule": "promise-ext"
        },
        {
            "file": "src/promise-ext/promise-ext.js",
            "line": 223,
            "description": "Returns a Promise with 3 additional methods:\n\npromise.fulfill\npromise.reject\npromise.callback\n\nWith Promise.manage, you get a Promise which is managable from outside, not inside as Promise A+ work.\nYou can invoke promise.**callback**() which will invoke the original passed-in callbackFn - if any.\npromise.**fulfill**() and promise.**reject**() are meant to resolve the promise from outside, just like deferred can do.",
            "example": [
                "\n    var promise = Promise.manage(\n        function(msg) {\n            alert(msg);\n        }\n    );\n\n    promise.then(\n        function() {\n            // promise is fulfilled, no further actions can be taken\n        }\n    );\n\n    setTimeout(function() {\n        promise.callback('hey, I\\'m still busy');\n    }, 1000);\n\n    setTimeout(function() {\n        promise.fulfill();\n    }, 2000);"
            ],
            "itemtype": "method",
            "name": "manage",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "invoked everytime promiseinstance.callback() is called.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "with three handles: fulfill, reject and callback.",
                "type": "Promise"
            },
            "static": 1,
            "class": "Promise",
            "module": "Promise",
            "submodule": "promise-ext"
        },
        {
            "file": "src/routing/routing.js",
            "line": 45,
            "description": "Current routing mode.  Can be one of the following, allowing paths of the format shown:\n\n* `'pathname'`: http://server/path/to/page\n* `'hash'`: http://server/#/path/to/page\n* **`'search'`**: http://server/?/path/to/page\n\nSee the user guide for further discussion about the different modes.",
            "itemtype": "property",
            "name": "mode",
            "type": "String",
            "default": "'search'",
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 60,
            "description": "Routing table. Contains a hash map, indexed by the url, \nwith the sub-Class of Parcel that should be instantiated to handle the route.",
            "itemtype": "property",
            "name": "routes",
            "type": "Hash table",
            "default": "{}",
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 70,
            "description": "DOM element where the application will be rendered.  Defaults to the `document.body`.",
            "itemtype": "property",
            "name": "rootNode",
            "type": "DOM reference",
            "default": "document.body",
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 79,
            "description": "Default route to use when the url given by the browser does not match any \nin the routing table",
            "itemtype": "property",
            "name": "defaultRoute",
            "type": "String",
            "default": "'/'",
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 165,
            "description": "Determines the routing configuration for an application.\nIt will immediately act on the given routes, running the corresponding parcel.\nThis method is for conveniency, all the properties it sets are public.\n\n```\nITSA.Router.setRoutes(\n\t{\n\t\t'/item/:id': ItemParcel,\n\t\t'/itemList': ItemList\n\t},\n\t'/itemList'\n);\n```\nIn this case we define two routes, the first one with a parameter `id`,\neach handled by a different Parcel. The default is the second route.\nNo `rootNode` has been specified, thus the parcel will be rendered\nin the `document.body`.",
            "itemtype": "method",
            "name": "setRoutes",
            "chainable": 1,
            "params": [
                {
                    "name": "routes",
                    "description": "A route table as described in [routes](#property_routes)",
                    "type": "Object"
                },
                {
                    "name": "mode",
                    "description": "One of `search`, `hash` of `pathname` to set the [mode](#property_mode) property.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "defaultRoute",
                    "description": "url of the route to execute if the current location doesn't match any of the above.\n     defaults to '/'",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "rootNode",
                    "description": "Where to render the given Parcel. Defaults to `document.body`.",
                    "type": "DOM Element",
                    "optional": true
                }
            ],
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 234,
            "description": "Returns the value of a parameter from the url when the route had variable parts.\nFor a route such as `'/item/:id'` if the browser navigates to `/item/123`,\n`getParam('id')` should return `123`.",
            "itemtype": "method",
            "name": "getParam",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the parameter to read",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the parameter or undefined if not found.",
                "type": "String"
            },
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 247,
            "description": "Navigates to the given route. Query parameters can be passed.  \nThe new route can either be added to the browser history or replace the current entry.\nIf the route is not found in the routing table, the [defaultRoute](#property_defaultRoute)\nwill be used.",
            "itemtype": "method",
            "name": "navigate",
            "chainable": 1,
            "params": [
                {
                    "name": "route",
                    "description": "url of the route to navigate to",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "parameters to be added to the query",
                    "type": "Hash Map",
                    "optional": true
                },
                {
                    "name": "replace",
                    "description": "if true, the given route will replace the current one in the browser history",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 284,
            "description": "Helper method to set or replace a route in the routing table.",
            "itemtype": "method",
            "name": "setRoute",
            "chainable": 1,
            "params": [
                {
                    "name": "route",
                    "description": "url template of the route to set or replace \n\tor a regular expression that should match the route.",
                    "type": "String |regex"
                },
                {
                    "name": "parcel",
                    "description": "sub-class of Parcel to instantiate to handle this route",
                    "type": "Parcel"
                }
            ],
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/routing/routing.js",
            "line": 305,
            "description": "Removes the given route from the routing table.",
            "itemtype": "method",
            "name": "removeRoute",
            "chainable": 1,
            "params": [
                {
                    "name": "route",
                    "description": "route to remove",
                    "type": "String"
                }
            ],
            "class": "Router",
            "module": "core",
            "submodule": "core-routing"
        },
        {
            "file": "src/utils/lib/idgenerator.js",
            "line": 14,
            "description": "Generates an unique id with the signature: \"namespace-follownr\"",
            "example": [
                "\n\n    var generator = require('core-utils-idgenerator');\n\n    console.log(generator()); // --> 1\n    console.log(generator()); // --> 2\n    console.log(generator(1000)); // --> 1000\n    console.log(generator()); // --> 1001\n    console.log(generator('Parcel, 500')); // -->\"Parcel-500\"\n    console.log(generator('Parcel')); // -->\"Parcel-501\""
            ],
            "itemtype": "method",
            "name": "idGenerator",
            "params": [
                {
                    "name": "namespace",
                    "description": "namespace to prepend the generated id.\n       When ignored, the generator just returns a number.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "startvalue for the next generated id. Any further generated id's will preceed this id.\n       If `start` is lower or equal than the last generated id, it will be ignored.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "an unique id. Either a number, or a String (digit prepended with \"namespace-\")",
                "type": "Number|String"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "src/utils/lib/timers.js",
            "line": 12,
            "description": "Forces a function to be run asynchronously, but as fast as possible. In Node.js\nthis is achieved using `setImmediate` or `process.nextTick`.",
            "itemtype": "method",
            "name": "_asynchronizer",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "The function to call asynchronously",
                    "type": "Function"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "src/utils/lib/timers.js",
            "line": 28,
            "description": "Invokes the callbackFn once in the next turn of the JavaScript event loop. If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nI.async returns an object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "An object with a cancel method.  If the cancel method is\ncalled before the callback function, the callback function won't be called.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "src/utils/lib/timers.js",
            "line": 63,
            "description": "Invokes the callbackFn after a timeout (asynchronous). If the function\nrequires a specific execution context or arguments, wrap it with Function.bind.\n\nTo invoke the callback function periodic, set 'periodic' either 'true', or specify a second timeout.\nIf number, then periodic is considered 'true' but with a perdiod defined by 'periodic',\nwhich means: the first timer executes after 'timeout' and next timers after 'period'.\n\nI.later returns an object with a cancel method.  If the cancel() method is\ncalled before the callback function, the callback function won't be called.",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "callbackFn",
                    "description": "the function to execute.",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "the number of milliseconds to wait until the callbackFn is executed.\nwhen not set, the callback function is invoked once in the next turn of the JavaScript event loop.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "periodic",
                    "description": "if true, executes continuously at supplied, if number, then periodic is considered 'true' but with a perdiod\ndefined by 'periodic', which means: the first timer executes after 'timeout' and next timers after 'period'.\nThe interval executes until canceled.",
                    "type": "Boolean|Number",
                    "optional": true
                },
                {
                    "name": "invokeAfterFn",
                    "description": "set to false to prevent the _afterSyncFn to be invoked",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "a timer object. Call the cancel() method on this object to stop the timer.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "src/utils/lib/typeof.js",
            "line": 22,
            "description": "Improved version of the `typeof` operator, distinguishes Arrays, Date and nulls from Object.\n\nReturns one of the following strings, representing the type of the item passed in:\n\n\"array\"\n\"boolean\"\n\"date\"\n\"error\"\n\"function\"\n\"null\"\n\"number\"\n\"object\"\n\"regexp\"\n\"string\"\n\"undefined\"",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
                {
                    "name": "o",
                    "description": "the item to test.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "the detected type.",
                "type": "String"
            },
            "static": 1,
            "class": "Utils",
            "module": "utils"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 37,
            "description": "Hash of special `tagNames` that imply change in the XML namespacing.",
            "itemtype": "property",
            "name": "_xmlNS",
            "type": "hash",
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 48,
            "description": "The virtual DOM for the application.",
            "itemtype": "property",
            "name": "_vDOM",
            "type": "vNode",
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 56,
            "description": "Helper function to build [vNodes](vNode.html).\n\nIt takes the name of the `tag` to be created.\nIt supports the following four modifiers, following the rules of CSS selectors:\n\n* A `namespace` prefix followed by a colon:  `svg:line` (not needed, see note below)\n* One or more CSS classes, each preceeded by a dot: `div.list`\n* An `id` preceeded by a pound: `div#a1`\n* One or more attribute assignments, each enclosed in square brackets: `input[type=checkbox]`\n\nThough the last three modifiers can be set via the `attrs` argument,\nfor performance reasons, if they won't change during the application\nit is better to set them via the above modifiers and reserve\nthe attributes for variable parts.\n\nIf modifiers are used, the tagName itself can be omitter and a `div` will be assumed.\nThus, `#a1` is the same as `div#al`.\n\nAttributes `class` and `style` have special treatment.\n\nThe `class` attribute can be given as a string or as an array of values, the last being preferable.\n\nThe `style` attribute should be set with an object containing a hash map of style names to values.\nThe style names should be in JavaScript format, not CSS format that is, `backgroundColor` not `background-color`.\n\nNeither the `svg:` or the `math:` namespaces are required.  The renderer will add the corresponding\n`xmlns` attribute upon detecting the `<svg>` or `<math>` elements.  All elements contained within\nany of those will be properly namespaced.",
            "example": [
                "\n```\n   var v = ITSA.Parcel.vNode;\n\n   v('br');\n   // produces:\n   {tag: 'br', attrs:{}, children:[]}\n   // Which will result in: <br/>\n\n   v('ul.list', options.map(function (option) {\n       return v('li', {'data-key': option.key}, option.text);\n   }));\n   // produces:\n   {tag:'ul', attrs: {class:'list'}, children: [\n       {tag:'li', attrs: {'data-key': 'k1'}, children: ['first value']},\n       {tag:'li', attrs: {'data-key': 'k2'}, children: ['second value']}\n   }\n   // Which would result in:\n   //<ul class=\"list\">\n   //    <li data-key=\"k1\">first value</li>\n   //    <li data-key=\"k2\">second value</li>\n   //</ul>\n\n   v('a#google.external[href=\"http://google.com\"]\", 'Google');\n   //would eventually result in:\n   <a id=\"google\" class=\"external\" href=\"http://google.com\">Google</a>\n```\nIt is recommended that unchanging classNames, IDs and attributes be encoded into the `tag` to improve\nefficiency, as these can be cached.   Use the `attrs` object for variable attributes."
            ],
            "itemtype": "method",
            "name": "vNode",
            "static": 1,
            "params": [
                {
                    "name": "tag",
                    "description": "Name of the tag to be created.\n Much like with a CSS selector,\n it can be followed by a `#` and an ID,\n any number of CSS classNames each preceded by a `.`\n and attribute assignments enclosed in square brackets (see example above).",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "Collection of attributes to be set on the node.\n Any value assigned to the `class` attribute will be appended to those provided along the tag.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "children",
                    "description": "It can be a further virtual DOM node, a parcel,\na simple value which will result in a text string or an array of either.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "return": {
                "description": "virtual DOM node.",
                "type": "Object"
            },
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 205,
            "description": "Triggers the rendering process for the page or parcel.\n\nThe rendering process starts with the production of a new virtual DOM for the page or component\nand a comparisson of the newly created *expected* DOM against the *existing* DOM.\nThe render process will only change those nodes in the actual DOM that differ in between the two.\n\nCalled without any arguments, it will start the process at the root of the virtual DOM.\nIf provided with an argument it will start the process at the branch of the virtual DOM\ncontrolled by the given Parcel instance.",
            "itemtype": "method",
            "name": "render",
            "static": 1,
            "params": [
                {
                    "name": "parcel",
                    "description": "Instance of Parcel in control of a section of a page.",
                    "type": "Parcel",
                    "optional": true
                }
            ],
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 227,
            "description": "Determines which [Parcel](Parcel.html) is the root app for this page\nand which is the DOM element it corresponds to and renders the app.\n\nIf the root app controls the whole screen, the corresponding DOM element is going to be\n`document.body`, which is the default when omitted.",
            "itemtype": "method",
            "name": "rootApp",
            "params": [
                {
                    "name": "Parcel",
                    "description": "instance of [Parcel](Parcel.html) that is the root of the app.",
                    "type": "Parcel"
                },
                {
                    "name": "element",
                    "description": "DOM element that is the root of the app.",
                    "type": "DOM element",
                    "optional": true,
                    "optdefault": "document.body"
                },
                {
                    "name": "parcelConfig",
                    "description": "optional arguments to provide to Parcel when intantiating it.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the root parcel just created (available in the [rootParcel](#property_rootParcel) property).",
                "type": "Parcel"
            },
            "static": 1,
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 264,
            "description": "Returns a new `pNode` based on the given parcel and namspace.",
            "itemtype": "method",
            "name": "_buildPNode",
            "params": [
                {
                    "name": "parcel",
                    "description": "Parcel instance that serves as the basis for this parcel",
                    "type": "Parcel"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new `pNode` based on the given parcel",
                "type": "PNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 283,
            "description": "Returns a new `vNode` based on the given `tag` and `namespace`",
            "itemtype": "method",
            "name": "_buildVNode",
            "params": [
                {
                    "name": "tag",
                    "description": "nodeName of the DOM node to be created.",
                    "type": "String"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a new `vNode`.",
                "type": "VNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 307,
            "description": "Returns a string node.",
            "itemtype": "method",
            "name": "_buildStringNode",
            "params": [
                {
                    "name": "Text",
                    "description": "to make the string node of",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "StringNode"
            },
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 320,
            "description": "Skips over Parcels whose stamp has not changed, looking for nested parcels within",
            "itemtype": "method",
            "name": "_skipPNode",
            "params": [
                {
                    "name": "children",
                    "description": "Array of children to lookk into",
                    "type": "[vNode | pNode]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 342,
            "description": "Runs the differences in between an existing and the expected `pNodes`",
            "itemtype": "method",
            "name": "_diffPNode",
            "params": [
                {
                    "name": "existing",
                    "description": "The existing `pNode`",
                    "type": "PNode"
                },
                {
                    "name": "parcel",
                    "description": "parcel that will supply the new pNode to compare against",
                    "type": "Parcel"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 367,
            "description": "Runs the difference between an existing and the expected `vNode`\nand makes the necessaty changes on the DOM based on the differences.\nAt the end, the existing should match the expected.",
            "itemtype": "method",
            "name": "_diffVNodes",
            "params": [
                {
                    "name": "existing",
                    "description": "Branch of the virtual DOM that represents the actual, current DOM",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "The same branch as it should become",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 385,
            "description": "Compares the children of the existing and the expected vDOM and makes the necessary\nchanges so it updates to the expected.",
            "itemtype": "method",
            "name": "_diffChildren",
            "params": [
                {
                    "name": "parentEl",
                    "description": "Element that contains the children represented by the existing vNode",
                    "type": "DOMElement"
                },
                {
                    "name": "existing",
                    "description": "virtual representation of the actual DOM",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "virtual representation of how it should be",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 573,
            "description": "Compares the attributes of the existing virtual DOM and the expected\nand makes the differences.",
            "itemtype": "method",
            "name": "_diffAttrs",
            "params": [
                {
                    "name": "existing",
                    "description": "vNode whose attributes represent the current state",
                    "type": "VNode"
                },
                {
                    "name": "expected",
                    "description": "vNode whose attributes are the new expected state",
                    "type": "VNode"
                },
                {
                    "name": "namespace",
                    "description": "current XML namespace URL",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 660,
            "description": "Compares the new and old list of classNames and\nif there is any difference, it sets the whole thing at once.",
            "itemtype": "method",
            "name": "_diffClassNames",
            "params": [
                {
                    "name": "existing",
                    "description": "virtual DOM node to apply this classes to",
                    "type": "VDOM"
                },
                {
                    "name": "value",
                    "description": "Object literal containing the current values",
                    "type": "Array"
                },
                {
                    "name": "newValue",
                    "description": "Object literal containin the new values",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 682,
            "description": "Compares the new and old styles and fixes the differences in the DOM",
            "itemtype": "method",
            "name": "_diffStyles",
            "params": [
                {
                    "name": "existing",
                    "description": "virtual DOM node to apply this styles to",
                    "type": "VDOM"
                },
                {
                    "name": "value",
                    "description": "Object literal containing the current values",
                    "type": "Object"
                },
                {
                    "name": "newValue",
                    "description": "Object literal containin the new values",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "vDOM",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 740,
            "description": "Represents the DOM `tagName` or node type.\nCorresponds to the HTML element type.",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "default": "\"DIV\"",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 749,
            "description": "The value of the `xmlns` attribute for namespaced elements\nsuch as `svg`.",
            "itemtype": "property",
            "name": "namespace",
            "type": "String",
            "default": "undefined",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 758,
            "description": "DOM node corresponding to the virtual node.\nIt is only present in the internal vDOM and only assigned\nafter the DOM has been rendered.",
            "itemtype": "property",
            "name": "node",
            "type": "DOM element",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 768,
            "description": "Collection of the attributes of the DOM element.\nIt is an hash map of attribute names to attribute values.",
            "itemtype": "property",
            "name": "attrs",
            "type": "Object",
            "default": "{}",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 778,
            "description": "Array of children nodes of this node.\nThe children can be either\n* further vNodes,\n* pNodes\n* plain values which will be converted to strings or tNodes",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "default": "undefined",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 790,
            "description": "Reference to the [Parcel](Parcel.html) instance that has produced this pNode\nand its descendants.",
            "itemtype": "property",
            "name": "parcel",
            "type": "Parcel",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        },
        {
            "file": "src/virtual-dom/virtual-dom.js",
            "line": 798,
            "description": "Value returned by the [`stamp()`](Parcel.html#method_stamp) method\nto compare whether the parcel contents has changed",
            "itemtype": "property",
            "name": "stamp",
            "type": "Any",
            "default": "NaN",
            "static": 1,
            "class": "vNode",
            "module": "virtual-dom"
        }
    ],
    "warnings": []
}